//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace Encore.REST.Model.Entities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("NewDataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class NewDataSet : DataSet {
        
        private CreatedByDataTable tableCreatedBy;
        
        private elementDataTable tableelement;
        
        private ParentGenreDataTable tableParentGenre;
        
        private UpdatedByDataTable tableUpdatedBy;
        
        private PrimaryArtistDataTable tablePrimaryArtist;
        
        private RequestedByDataTable tableRequestedBy;
        
        private TrackDataTable tableTrack;
        
        private EncodedAudioFilesDataTable tableEncodedAudioFiles;
        
        private GenresDataTable tableGenres;
        
        private MusicalWorkDataTable tableMusicalWork;
        
        private PublishersDataTable tablePublishers;
        
        private PublisherDataTable tablePublisher;
        
        private WritersDataTable tableWriters;
        
        private PhysicalDiscDataTable tablePhysicalDisc;
        
        private ReleaseDataTable tableRelease;
        
        private LabelsDataTable tableLabels;
        
        private DataRelation relationPrimaryArtist_CreatedBy;
        
        private DataRelation relationPublisher_CreatedBy;
        
        private DataRelation relationMusicalWork_CreatedBy;
        
        private DataRelation relationPhysicalDisc_CreatedBy;
        
        private DataRelation relationRelease_CreatedBy;
        
        private DataRelation relationTrack_CreatedBy;
        
        private DataRelation relationEncodedAudioFiles_element;
        
        private DataRelation relationGenres_element;
        
        private DataRelation relationWriters_element;
        
        private DataRelation relationLabels_element;
        
        private DataRelation relationelement_ParentGenre;
        
        private DataRelation relationPrimaryArtist_UpdatedBy;
        
        private DataRelation relationPublisher_UpdatedBy;
        
        private DataRelation relationMusicalWork_UpdatedBy;
        
        private DataRelation relationPhysicalDisc_UpdatedBy;
        
        private DataRelation relationRelease_UpdatedBy;
        
        private DataRelation relationTrack_UpdatedBy;
        
        private DataRelation relationRelease_PrimaryArtist;
        
        private DataRelation relationTrack_PrimaryArtist;
        
        private DataRelation relationRelease_RequestedBy;
        
        private DataRelation relationTrack_RequestedBy;
        
        private DataRelation relationTrack_EncodedAudioFiles;
        
        private DataRelation relationTrack_Genres;
        
        private DataRelation relationTrack_MusicalWork;
        
        private DataRelation relationMusicalWork_Publishers;
        
        private DataRelation relationPublishers_Publisher;
        
        private DataRelation relationMusicalWork_Writers;
        
        private DataRelation relationTrack_PhysicalDisc;
        
        private DataRelation relationTrack_Release;
        
        private DataRelation relationRelease_Labels;
        
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected NewDataSet(SerializationInfo info, StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["CreatedBy"] != null)) {
                    base.Tables.Add(new CreatedByDataTable(ds.Tables["CreatedBy"]));
                }
                if ((ds.Tables["element"] != null)) {
                    base.Tables.Add(new elementDataTable(ds.Tables["element"]));
                }
                if ((ds.Tables["ParentGenre"] != null)) {
                    base.Tables.Add(new ParentGenreDataTable(ds.Tables["ParentGenre"]));
                }
                if ((ds.Tables["UpdatedBy"] != null)) {
                    base.Tables.Add(new UpdatedByDataTable(ds.Tables["UpdatedBy"]));
                }
                if ((ds.Tables["PrimaryArtist"] != null)) {
                    base.Tables.Add(new PrimaryArtistDataTable(ds.Tables["PrimaryArtist"]));
                }
                if ((ds.Tables["RequestedBy"] != null)) {
                    base.Tables.Add(new RequestedByDataTable(ds.Tables["RequestedBy"]));
                }
                if ((ds.Tables["Track"] != null)) {
                    base.Tables.Add(new TrackDataTable(ds.Tables["Track"]));
                }
                if ((ds.Tables["EncodedAudioFiles"] != null)) {
                    base.Tables.Add(new EncodedAudioFilesDataTable(ds.Tables["EncodedAudioFiles"]));
                }
                if ((ds.Tables["Genres"] != null)) {
                    base.Tables.Add(new GenresDataTable(ds.Tables["Genres"]));
                }
                if ((ds.Tables["MusicalWork"] != null)) {
                    base.Tables.Add(new MusicalWorkDataTable(ds.Tables["MusicalWork"]));
                }
                if ((ds.Tables["Publishers"] != null)) {
                    base.Tables.Add(new PublishersDataTable(ds.Tables["Publishers"]));
                }
                if ((ds.Tables["Publisher"] != null)) {
                    base.Tables.Add(new PublisherDataTable(ds.Tables["Publisher"]));
                }
                if ((ds.Tables["Writers"] != null)) {
                    base.Tables.Add(new WritersDataTable(ds.Tables["Writers"]));
                }
                if ((ds.Tables["PhysicalDisc"] != null)) {
                    base.Tables.Add(new PhysicalDiscDataTable(ds.Tables["PhysicalDisc"]));
                }
                if ((ds.Tables["Release"] != null)) {
                    base.Tables.Add(new ReleaseDataTable(ds.Tables["Release"]));
                }
                if ((ds.Tables["Labels"] != null)) {
                    base.Tables.Add(new LabelsDataTable(ds.Tables["Labels"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CreatedByDataTable CreatedBy {
            get {
                return this.tableCreatedBy;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public elementDataTable element {
            get {
                return this.tableelement;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ParentGenreDataTable ParentGenre {
            get {
                return this.tableParentGenre;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public UpdatedByDataTable UpdatedBy {
            get {
                return this.tableUpdatedBy;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PrimaryArtistDataTable PrimaryArtist {
            get {
                return this.tablePrimaryArtist;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public RequestedByDataTable RequestedBy {
            get {
                return this.tableRequestedBy;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TrackDataTable Track {
            get {
                return this.tableTrack;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public EncodedAudioFilesDataTable EncodedAudioFiles {
            get {
                return this.tableEncodedAudioFiles;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public GenresDataTable Genres {
            get {
                return this.tableGenres;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public MusicalWorkDataTable MusicalWork {
            get {
                return this.tableMusicalWork;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PublishersDataTable Publishers {
            get {
                return this.tablePublishers;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PublisherDataTable Publisher {
            get {
                return this.tablePublisher;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public WritersDataTable Writers {
            get {
                return this.tableWriters;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PhysicalDiscDataTable PhysicalDisc {
            get {
                return this.tablePhysicalDisc;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReleaseDataTable Release {
            get {
                return this.tableRelease;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public LabelsDataTable Labels {
            get {
                return this.tableLabels;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CreatedBy"] != null)) {
                    base.Tables.Add(new CreatedByDataTable(ds.Tables["CreatedBy"]));
                }
                if ((ds.Tables["element"] != null)) {
                    base.Tables.Add(new elementDataTable(ds.Tables["element"]));
                }
                if ((ds.Tables["ParentGenre"] != null)) {
                    base.Tables.Add(new ParentGenreDataTable(ds.Tables["ParentGenre"]));
                }
                if ((ds.Tables["UpdatedBy"] != null)) {
                    base.Tables.Add(new UpdatedByDataTable(ds.Tables["UpdatedBy"]));
                }
                if ((ds.Tables["PrimaryArtist"] != null)) {
                    base.Tables.Add(new PrimaryArtistDataTable(ds.Tables["PrimaryArtist"]));
                }
                if ((ds.Tables["RequestedBy"] != null)) {
                    base.Tables.Add(new RequestedByDataTable(ds.Tables["RequestedBy"]));
                }
                if ((ds.Tables["Track"] != null)) {
                    base.Tables.Add(new TrackDataTable(ds.Tables["Track"]));
                }
                if ((ds.Tables["EncodedAudioFiles"] != null)) {
                    base.Tables.Add(new EncodedAudioFilesDataTable(ds.Tables["EncodedAudioFiles"]));
                }
                if ((ds.Tables["Genres"] != null)) {
                    base.Tables.Add(new GenresDataTable(ds.Tables["Genres"]));
                }
                if ((ds.Tables["MusicalWork"] != null)) {
                    base.Tables.Add(new MusicalWorkDataTable(ds.Tables["MusicalWork"]));
                }
                if ((ds.Tables["Publishers"] != null)) {
                    base.Tables.Add(new PublishersDataTable(ds.Tables["Publishers"]));
                }
                if ((ds.Tables["Publisher"] != null)) {
                    base.Tables.Add(new PublisherDataTable(ds.Tables["Publisher"]));
                }
                if ((ds.Tables["Writers"] != null)) {
                    base.Tables.Add(new WritersDataTable(ds.Tables["Writers"]));
                }
                if ((ds.Tables["PhysicalDisc"] != null)) {
                    base.Tables.Add(new PhysicalDiscDataTable(ds.Tables["PhysicalDisc"]));
                }
                if ((ds.Tables["Release"] != null)) {
                    base.Tables.Add(new ReleaseDataTable(ds.Tables["Release"]));
                }
                if ((ds.Tables["Labels"] != null)) {
                    base.Tables.Add(new LabelsDataTable(ds.Tables["Labels"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCreatedBy = ((CreatedByDataTable)(base.Tables["CreatedBy"]));
            if ((initTable == true)) {
                if ((this.tableCreatedBy != null)) {
                    this.tableCreatedBy.InitVars();
                }
            }
            this.tableelement = ((elementDataTable)(base.Tables["element"]));
            if ((initTable == true)) {
                if ((this.tableelement != null)) {
                    this.tableelement.InitVars();
                }
            }
            this.tableParentGenre = ((ParentGenreDataTable)(base.Tables["ParentGenre"]));
            if ((initTable == true)) {
                if ((this.tableParentGenre != null)) {
                    this.tableParentGenre.InitVars();
                }
            }
            this.tableUpdatedBy = ((UpdatedByDataTable)(base.Tables["UpdatedBy"]));
            if ((initTable == true)) {
                if ((this.tableUpdatedBy != null)) {
                    this.tableUpdatedBy.InitVars();
                }
            }
            this.tablePrimaryArtist = ((PrimaryArtistDataTable)(base.Tables["PrimaryArtist"]));
            if ((initTable == true)) {
                if ((this.tablePrimaryArtist != null)) {
                    this.tablePrimaryArtist.InitVars();
                }
            }
            this.tableRequestedBy = ((RequestedByDataTable)(base.Tables["RequestedBy"]));
            if ((initTable == true)) {
                if ((this.tableRequestedBy != null)) {
                    this.tableRequestedBy.InitVars();
                }
            }
            this.tableTrack = ((TrackDataTable)(base.Tables["Track"]));
            if ((initTable == true)) {
                if ((this.tableTrack != null)) {
                    this.tableTrack.InitVars();
                }
            }
            this.tableEncodedAudioFiles = ((EncodedAudioFilesDataTable)(base.Tables["EncodedAudioFiles"]));
            if ((initTable == true)) {
                if ((this.tableEncodedAudioFiles != null)) {
                    this.tableEncodedAudioFiles.InitVars();
                }
            }
            this.tableGenres = ((GenresDataTable)(base.Tables["Genres"]));
            if ((initTable == true)) {
                if ((this.tableGenres != null)) {
                    this.tableGenres.InitVars();
                }
            }
            this.tableMusicalWork = ((MusicalWorkDataTable)(base.Tables["MusicalWork"]));
            if ((initTable == true)) {
                if ((this.tableMusicalWork != null)) {
                    this.tableMusicalWork.InitVars();
                }
            }
            this.tablePublishers = ((PublishersDataTable)(base.Tables["Publishers"]));
            if ((initTable == true)) {
                if ((this.tablePublishers != null)) {
                    this.tablePublishers.InitVars();
                }
            }
            this.tablePublisher = ((PublisherDataTable)(base.Tables["Publisher"]));
            if ((initTable == true)) {
                if ((this.tablePublisher != null)) {
                    this.tablePublisher.InitVars();
                }
            }
            this.tableWriters = ((WritersDataTable)(base.Tables["Writers"]));
            if ((initTable == true)) {
                if ((this.tableWriters != null)) {
                    this.tableWriters.InitVars();
                }
            }
            this.tablePhysicalDisc = ((PhysicalDiscDataTable)(base.Tables["PhysicalDisc"]));
            if ((initTable == true)) {
                if ((this.tablePhysicalDisc != null)) {
                    this.tablePhysicalDisc.InitVars();
                }
            }
            this.tableRelease = ((ReleaseDataTable)(base.Tables["Release"]));
            if ((initTable == true)) {
                if ((this.tableRelease != null)) {
                    this.tableRelease.InitVars();
                }
            }
            this.tableLabels = ((LabelsDataTable)(base.Tables["Labels"]));
            if ((initTable == true)) {
                if ((this.tableLabels != null)) {
                    this.tableLabels.InitVars();
                }
            }
            this.relationPrimaryArtist_CreatedBy = this.Relations["PrimaryArtist_CreatedBy"];
            this.relationPublisher_CreatedBy = this.Relations["Publisher_CreatedBy"];
            this.relationMusicalWork_CreatedBy = this.Relations["MusicalWork_CreatedBy"];
            this.relationPhysicalDisc_CreatedBy = this.Relations["PhysicalDisc_CreatedBy"];
            this.relationRelease_CreatedBy = this.Relations["Release_CreatedBy"];
            this.relationTrack_CreatedBy = this.Relations["Track_CreatedBy"];
            this.relationEncodedAudioFiles_element = this.Relations["EncodedAudioFiles_element"];
            this.relationGenres_element = this.Relations["Genres_element"];
            this.relationWriters_element = this.Relations["Writers_element"];
            this.relationLabels_element = this.Relations["Labels_element"];
            this.relationelement_ParentGenre = this.Relations["element_ParentGenre"];
            this.relationPrimaryArtist_UpdatedBy = this.Relations["PrimaryArtist_UpdatedBy"];
            this.relationPublisher_UpdatedBy = this.Relations["Publisher_UpdatedBy"];
            this.relationMusicalWork_UpdatedBy = this.Relations["MusicalWork_UpdatedBy"];
            this.relationPhysicalDisc_UpdatedBy = this.Relations["PhysicalDisc_UpdatedBy"];
            this.relationRelease_UpdatedBy = this.Relations["Release_UpdatedBy"];
            this.relationTrack_UpdatedBy = this.Relations["Track_UpdatedBy"];
            this.relationRelease_PrimaryArtist = this.Relations["Release_PrimaryArtist"];
            this.relationTrack_PrimaryArtist = this.Relations["Track_PrimaryArtist"];
            this.relationRelease_RequestedBy = this.Relations["Release_RequestedBy"];
            this.relationTrack_RequestedBy = this.Relations["Track_RequestedBy"];
            this.relationTrack_EncodedAudioFiles = this.Relations["Track_EncodedAudioFiles"];
            this.relationTrack_Genres = this.Relations["Track_Genres"];
            this.relationTrack_MusicalWork = this.Relations["Track_MusicalWork"];
            this.relationMusicalWork_Publishers = this.Relations["MusicalWork_Publishers"];
            this.relationPublishers_Publisher = this.Relations["Publishers_Publisher"];
            this.relationMusicalWork_Writers = this.Relations["MusicalWork_Writers"];
            this.relationTrack_PhysicalDisc = this.Relations["Track_PhysicalDisc"];
            this.relationTrack_Release = this.Relations["Track_Release"];
            this.relationRelease_Labels = this.Relations["Release_Labels"];
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tableCreatedBy = new CreatedByDataTable();
            base.Tables.Add(this.tableCreatedBy);
            this.tableelement = new elementDataTable();
            base.Tables.Add(this.tableelement);
            this.tableParentGenre = new ParentGenreDataTable();
            base.Tables.Add(this.tableParentGenre);
            this.tableUpdatedBy = new UpdatedByDataTable();
            base.Tables.Add(this.tableUpdatedBy);
            this.tablePrimaryArtist = new PrimaryArtistDataTable();
            base.Tables.Add(this.tablePrimaryArtist);
            this.tableRequestedBy = new RequestedByDataTable();
            base.Tables.Add(this.tableRequestedBy);
            this.tableTrack = new TrackDataTable();
            base.Tables.Add(this.tableTrack);
            this.tableEncodedAudioFiles = new EncodedAudioFilesDataTable();
            base.Tables.Add(this.tableEncodedAudioFiles);
            this.tableGenres = new GenresDataTable();
            base.Tables.Add(this.tableGenres);
            this.tableMusicalWork = new MusicalWorkDataTable();
            base.Tables.Add(this.tableMusicalWork);
            this.tablePublishers = new PublishersDataTable();
            base.Tables.Add(this.tablePublishers);
            this.tablePublisher = new PublisherDataTable();
            base.Tables.Add(this.tablePublisher);
            this.tableWriters = new WritersDataTable();
            base.Tables.Add(this.tableWriters);
            this.tablePhysicalDisc = new PhysicalDiscDataTable();
            base.Tables.Add(this.tablePhysicalDisc);
            this.tableRelease = new ReleaseDataTable();
            base.Tables.Add(this.tableRelease);
            this.tableLabels = new LabelsDataTable();
            base.Tables.Add(this.tableLabels);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PrimaryArtist_CreatedBy", new DataColumn[] {
                        this.tablePrimaryArtist.PrimaryArtist_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.PrimaryArtist_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Publisher_CreatedBy", new DataColumn[] {
                        this.tablePublisher.Publisher_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Publisher_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MusicalWork_CreatedBy", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.MusicalWork_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("PhysicalDisc_CreatedBy", new DataColumn[] {
                        this.tablePhysicalDisc.PhysicalDisc_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.PhysicalDisc_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Release_CreatedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Release_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_CreatedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Track_IdColumn});
            this.tableCreatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("EncodedAudioFiles_element", new DataColumn[] {
                        this.tableEncodedAudioFiles.EncodedAudioFiles_IdColumn}, new DataColumn[] {
                        this.tableelement.EncodedAudioFiles_IdColumn});
            this.tableelement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Genres_element", new DataColumn[] {
                        this.tableGenres.Genres_IdColumn}, new DataColumn[] {
                        this.tableelement.Genres_IdColumn});
            this.tableelement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Writers_element", new DataColumn[] {
                        this.tableWriters.Writers_IdColumn}, new DataColumn[] {
                        this.tableelement.Writers_IdColumn});
            this.tableelement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Labels_element", new DataColumn[] {
                        this.tableLabels.Labels_IdColumn}, new DataColumn[] {
                        this.tableelement.Labels_IdColumn});
            this.tableelement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("element_ParentGenre", new DataColumn[] {
                        this.tableelement.element_IdColumn}, new DataColumn[] {
                        this.tableParentGenre.element_IdColumn});
            this.tableParentGenre.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("PrimaryArtist_UpdatedBy", new DataColumn[] {
                        this.tablePrimaryArtist.PrimaryArtist_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.PrimaryArtist_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Publisher_UpdatedBy", new DataColumn[] {
                        this.tablePublisher.Publisher_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Publisher_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MusicalWork_UpdatedBy", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.MusicalWork_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("PhysicalDisc_UpdatedBy", new DataColumn[] {
                        this.tablePhysicalDisc.PhysicalDisc_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.PhysicalDisc_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Release_UpdatedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Release_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_UpdatedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Track_IdColumn});
            this.tableUpdatedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Release_PrimaryArtist", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tablePrimaryArtist.Release_IdColumn});
            this.tablePrimaryArtist.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_PrimaryArtist", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tablePrimaryArtist.Track_IdColumn});
            this.tablePrimaryArtist.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Release_RequestedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableRequestedBy.Release_IdColumn});
            this.tableRequestedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_RequestedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableRequestedBy.Track_IdColumn});
            this.tableRequestedBy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_EncodedAudioFiles", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableEncodedAudioFiles.Track_IdColumn});
            this.tableEncodedAudioFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_Genres", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableGenres.Track_IdColumn});
            this.tableGenres.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_MusicalWork", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableMusicalWork.Track_IdColumn});
            this.tableMusicalWork.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MusicalWork_Publishers", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tablePublishers.MusicalWork_IdColumn});
            this.tablePublishers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Publishers_Publisher", new DataColumn[] {
                        this.tablePublishers.Publishers_IdColumn}, new DataColumn[] {
                        this.tablePublisher.Publishers_IdColumn});
            this.tablePublisher.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("MusicalWork_Writers", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableWriters.MusicalWork_IdColumn});
            this.tableWriters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_PhysicalDisc", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tablePhysicalDisc.Track_IdColumn});
            this.tablePhysicalDisc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Track_Release", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableRelease.Track_IdColumn});
            this.tableRelease.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("Release_Labels", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableLabels.Release_IdColumn});
            this.tableLabels.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationPrimaryArtist_CreatedBy = new DataRelation("PrimaryArtist_CreatedBy", new DataColumn[] {
                        this.tablePrimaryArtist.PrimaryArtist_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.PrimaryArtist_IdColumn}, false);
            this.relationPrimaryArtist_CreatedBy.Nested = true;
            this.Relations.Add(this.relationPrimaryArtist_CreatedBy);
            this.relationPublisher_CreatedBy = new DataRelation("Publisher_CreatedBy", new DataColumn[] {
                        this.tablePublisher.Publisher_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Publisher_IdColumn}, false);
            this.relationPublisher_CreatedBy.Nested = true;
            this.Relations.Add(this.relationPublisher_CreatedBy);
            this.relationMusicalWork_CreatedBy = new DataRelation("MusicalWork_CreatedBy", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.MusicalWork_IdColumn}, false);
            this.relationMusicalWork_CreatedBy.Nested = true;
            this.Relations.Add(this.relationMusicalWork_CreatedBy);
            this.relationPhysicalDisc_CreatedBy = new DataRelation("PhysicalDisc_CreatedBy", new DataColumn[] {
                        this.tablePhysicalDisc.PhysicalDisc_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.PhysicalDisc_IdColumn}, false);
            this.relationPhysicalDisc_CreatedBy.Nested = true;
            this.Relations.Add(this.relationPhysicalDisc_CreatedBy);
            this.relationRelease_CreatedBy = new DataRelation("Release_CreatedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Release_IdColumn}, false);
            this.relationRelease_CreatedBy.Nested = true;
            this.Relations.Add(this.relationRelease_CreatedBy);
            this.relationTrack_CreatedBy = new DataRelation("Track_CreatedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableCreatedBy.Track_IdColumn}, false);
            this.relationTrack_CreatedBy.Nested = true;
            this.Relations.Add(this.relationTrack_CreatedBy);
            this.relationEncodedAudioFiles_element = new DataRelation("EncodedAudioFiles_element", new DataColumn[] {
                        this.tableEncodedAudioFiles.EncodedAudioFiles_IdColumn}, new DataColumn[] {
                        this.tableelement.EncodedAudioFiles_IdColumn}, false);
            this.relationEncodedAudioFiles_element.Nested = true;
            this.Relations.Add(this.relationEncodedAudioFiles_element);
            this.relationGenres_element = new DataRelation("Genres_element", new DataColumn[] {
                        this.tableGenres.Genres_IdColumn}, new DataColumn[] {
                        this.tableelement.Genres_IdColumn}, false);
            this.relationGenres_element.Nested = true;
            this.Relations.Add(this.relationGenres_element);
            this.relationWriters_element = new DataRelation("Writers_element", new DataColumn[] {
                        this.tableWriters.Writers_IdColumn}, new DataColumn[] {
                        this.tableelement.Writers_IdColumn}, false);
            this.relationWriters_element.Nested = true;
            this.Relations.Add(this.relationWriters_element);
            this.relationLabels_element = new DataRelation("Labels_element", new DataColumn[] {
                        this.tableLabels.Labels_IdColumn}, new DataColumn[] {
                        this.tableelement.Labels_IdColumn}, false);
            this.relationLabels_element.Nested = true;
            this.Relations.Add(this.relationLabels_element);
            this.relationelement_ParentGenre = new DataRelation("element_ParentGenre", new DataColumn[] {
                        this.tableelement.element_IdColumn}, new DataColumn[] {
                        this.tableParentGenre.element_IdColumn}, false);
            this.relationelement_ParentGenre.Nested = true;
            this.Relations.Add(this.relationelement_ParentGenre);
            this.relationPrimaryArtist_UpdatedBy = new DataRelation("PrimaryArtist_UpdatedBy", new DataColumn[] {
                        this.tablePrimaryArtist.PrimaryArtist_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.PrimaryArtist_IdColumn}, false);
            this.relationPrimaryArtist_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationPrimaryArtist_UpdatedBy);
            this.relationPublisher_UpdatedBy = new DataRelation("Publisher_UpdatedBy", new DataColumn[] {
                        this.tablePublisher.Publisher_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Publisher_IdColumn}, false);
            this.relationPublisher_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationPublisher_UpdatedBy);
            this.relationMusicalWork_UpdatedBy = new DataRelation("MusicalWork_UpdatedBy", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.MusicalWork_IdColumn}, false);
            this.relationMusicalWork_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationMusicalWork_UpdatedBy);
            this.relationPhysicalDisc_UpdatedBy = new DataRelation("PhysicalDisc_UpdatedBy", new DataColumn[] {
                        this.tablePhysicalDisc.PhysicalDisc_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.PhysicalDisc_IdColumn}, false);
            this.relationPhysicalDisc_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationPhysicalDisc_UpdatedBy);
            this.relationRelease_UpdatedBy = new DataRelation("Release_UpdatedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Release_IdColumn}, false);
            this.relationRelease_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationRelease_UpdatedBy);
            this.relationTrack_UpdatedBy = new DataRelation("Track_UpdatedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableUpdatedBy.Track_IdColumn}, false);
            this.relationTrack_UpdatedBy.Nested = true;
            this.Relations.Add(this.relationTrack_UpdatedBy);
            this.relationRelease_PrimaryArtist = new DataRelation("Release_PrimaryArtist", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tablePrimaryArtist.Release_IdColumn}, false);
            this.relationRelease_PrimaryArtist.Nested = true;
            this.Relations.Add(this.relationRelease_PrimaryArtist);
            this.relationTrack_PrimaryArtist = new DataRelation("Track_PrimaryArtist", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tablePrimaryArtist.Track_IdColumn}, false);
            this.relationTrack_PrimaryArtist.Nested = true;
            this.Relations.Add(this.relationTrack_PrimaryArtist);
            this.relationRelease_RequestedBy = new DataRelation("Release_RequestedBy", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableRequestedBy.Release_IdColumn}, false);
            this.relationRelease_RequestedBy.Nested = true;
            this.Relations.Add(this.relationRelease_RequestedBy);
            this.relationTrack_RequestedBy = new DataRelation("Track_RequestedBy", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableRequestedBy.Track_IdColumn}, false);
            this.relationTrack_RequestedBy.Nested = true;
            this.Relations.Add(this.relationTrack_RequestedBy);
            this.relationTrack_EncodedAudioFiles = new DataRelation("Track_EncodedAudioFiles", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableEncodedAudioFiles.Track_IdColumn}, false);
            this.relationTrack_EncodedAudioFiles.Nested = true;
            this.Relations.Add(this.relationTrack_EncodedAudioFiles);
            this.relationTrack_Genres = new DataRelation("Track_Genres", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableGenres.Track_IdColumn}, false);
            this.relationTrack_Genres.Nested = true;
            this.Relations.Add(this.relationTrack_Genres);
            this.relationTrack_MusicalWork = new DataRelation("Track_MusicalWork", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableMusicalWork.Track_IdColumn}, false);
            this.relationTrack_MusicalWork.Nested = true;
            this.Relations.Add(this.relationTrack_MusicalWork);
            this.relationMusicalWork_Publishers = new DataRelation("MusicalWork_Publishers", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tablePublishers.MusicalWork_IdColumn}, false);
            this.relationMusicalWork_Publishers.Nested = true;
            this.Relations.Add(this.relationMusicalWork_Publishers);
            this.relationPublishers_Publisher = new DataRelation("Publishers_Publisher", new DataColumn[] {
                        this.tablePublishers.Publishers_IdColumn}, new DataColumn[] {
                        this.tablePublisher.Publishers_IdColumn}, false);
            this.relationPublishers_Publisher.Nested = true;
            this.Relations.Add(this.relationPublishers_Publisher);
            this.relationMusicalWork_Writers = new DataRelation("MusicalWork_Writers", new DataColumn[] {
                        this.tableMusicalWork.MusicalWork_IdColumn}, new DataColumn[] {
                        this.tableWriters.MusicalWork_IdColumn}, false);
            this.relationMusicalWork_Writers.Nested = true;
            this.Relations.Add(this.relationMusicalWork_Writers);
            this.relationTrack_PhysicalDisc = new DataRelation("Track_PhysicalDisc", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tablePhysicalDisc.Track_IdColumn}, false);
            this.relationTrack_PhysicalDisc.Nested = true;
            this.Relations.Add(this.relationTrack_PhysicalDisc);
            this.relationTrack_Release = new DataRelation("Track_Release", new DataColumn[] {
                        this.tableTrack.Track_IdColumn}, new DataColumn[] {
                        this.tableRelease.Track_IdColumn}, false);
            this.relationTrack_Release.Nested = true;
            this.Relations.Add(this.relationTrack_Release);
            this.relationRelease_Labels = new DataRelation("Release_Labels", new DataColumn[] {
                        this.tableRelease.Release_IdColumn}, new DataColumn[] {
                        this.tableLabels.Release_IdColumn}, false);
            this.relationRelease_Labels.Nested = true;
            this.Relations.Add(this.relationRelease_Labels);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCreatedBy() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeelement() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeParentGenre() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeUpdatedBy() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePrimaryArtist() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRequestedBy() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTrack() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEncodedAudioFiles() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGenres() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeMusicalWork() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePublishers() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePublisher() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeWriters() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePhysicalDisc() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRelease() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLabels() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                MemoryStream s1 = new MemoryStream();
                MemoryStream s2 = new MemoryStream();
                try {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreatedByRowChangeEventHandler(object sender, CreatedByRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void elementRowChangeEventHandler(object sender, elementRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ParentGenreRowChangeEventHandler(object sender, ParentGenreRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void UpdatedByRowChangeEventHandler(object sender, UpdatedByRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PrimaryArtistRowChangeEventHandler(object sender, PrimaryArtistRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RequestedByRowChangeEventHandler(object sender, RequestedByRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TrackRowChangeEventHandler(object sender, TrackRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EncodedAudioFilesRowChangeEventHandler(object sender, EncodedAudioFilesRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GenresRowChangeEventHandler(object sender, GenresRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MusicalWorkRowChangeEventHandler(object sender, MusicalWorkRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PublishersRowChangeEventHandler(object sender, PublishersRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PublisherRowChangeEventHandler(object sender, PublisherRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void WritersRowChangeEventHandler(object sender, WritersRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PhysicalDiscRowChangeEventHandler(object sender, PhysicalDiscRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReleaseRowChangeEventHandler(object sender, ReleaseRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LabelsRowChangeEventHandler(object sender, LabelsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CreatedByDataTable : TypedTableBase<CreatedByRow> {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn columnemail;
            
            private DataColumn columnPrimaryArtist_Id;
            
            private DataColumn columnPublisher_Id;
            
            private DataColumn columnMusicalWork_Id;
            
            private DataColumn columnPhysicalDisc_Id;
            
            private DataColumn columnRelease_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByDataTable() {
                this.TableName = "CreatedBy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreatedByDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CreatedByDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrimaryArtist_IdColumn {
                get {
                    return this.columnPrimaryArtist_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Publisher_IdColumn {
                get {
                    return this.columnPublisher_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MusicalWork_IdColumn {
                get {
                    return this.columnMusicalWork_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PhysicalDisc_IdColumn {
                get {
                    return this.columnPhysicalDisc_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow this[int index] {
                get {
                    return ((CreatedByRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CreatedByRowChangeEventHandler CreatedByRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CreatedByRowChangeEventHandler CreatedByRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CreatedByRowChangeEventHandler CreatedByRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CreatedByRowChangeEventHandler CreatedByRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCreatedByRow(CreatedByRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow AddCreatedByRow(string Id, string Name, string email, PrimaryArtistRow parentPrimaryArtistRowByPrimaryArtist_CreatedBy, PublisherRow parentPublisherRowByPublisher_CreatedBy, MusicalWorkRow parentMusicalWorkRowByMusicalWork_CreatedBy, PhysicalDiscRow parentPhysicalDiscRowByPhysicalDisc_CreatedBy, ReleaseRow parentReleaseRowByRelease_CreatedBy, TrackRow parentTrackRowByTrack_CreatedBy) {
                CreatedByRow rowCreatedByRow = ((CreatedByRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name,
                        email,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentPrimaryArtistRowByPrimaryArtist_CreatedBy != null)) {
                    columnValuesArray[3] = parentPrimaryArtistRowByPrimaryArtist_CreatedBy[10];
                }
                if ((parentPublisherRowByPublisher_CreatedBy != null)) {
                    columnValuesArray[4] = parentPublisherRowByPublisher_CreatedBy[10];
                }
                if ((parentMusicalWorkRowByMusicalWork_CreatedBy != null)) {
                    columnValuesArray[5] = parentMusicalWorkRowByMusicalWork_CreatedBy[6];
                }
                if ((parentPhysicalDiscRowByPhysicalDisc_CreatedBy != null)) {
                    columnValuesArray[6] = parentPhysicalDiscRowByPhysicalDisc_CreatedBy[6];
                }
                if ((parentReleaseRowByRelease_CreatedBy != null)) {
                    columnValuesArray[7] = parentReleaseRowByRelease_CreatedBy[12];
                }
                if ((parentTrackRowByTrack_CreatedBy != null)) {
                    columnValuesArray[8] = parentTrackRowByTrack_CreatedBy[16];
                }
                rowCreatedByRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCreatedByRow);
                return rowCreatedByRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                CreatedByDataTable cln = ((CreatedByDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new CreatedByDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnemail = base.Columns["email"];
                this.columnPrimaryArtist_Id = base.Columns["PrimaryArtist_Id"];
                this.columnPublisher_Id = base.Columns["Publisher_Id"];
                this.columnMusicalWork_Id = base.Columns["MusicalWork_Id"];
                this.columnPhysicalDisc_Id = base.Columns["PhysicalDisc_Id"];
                this.columnRelease_Id = base.Columns["Release_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnemail = new DataColumn("email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnPrimaryArtist_Id = new DataColumn("PrimaryArtist_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPrimaryArtist_Id);
                this.columnPublisher_Id = new DataColumn("Publisher_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPublisher_Id);
                this.columnMusicalWork_Id = new DataColumn("MusicalWork_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnMusicalWork_Id);
                this.columnPhysicalDisc_Id = new DataColumn("PhysicalDisc_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPhysicalDisc_Id);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow NewCreatedByRow() {
                return ((CreatedByRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CreatedByRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(CreatedByRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreatedByRowChanged != null)) {
                    this.CreatedByRowChanged(this, new CreatedByRowChangeEvent(((CreatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreatedByRowChanging != null)) {
                    this.CreatedByRowChanging(this, new CreatedByRowChangeEvent(((CreatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreatedByRowDeleted != null)) {
                    this.CreatedByRowDeleted(this, new CreatedByRowChangeEvent(((CreatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreatedByRowDeleting != null)) {
                    this.CreatedByRowDeleting(this, new CreatedByRowChangeEvent(((CreatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCreatedByRow(CreatedByRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CreatedByDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class elementDataTable : TypedTableBase<elementRow> {
            
            private DataColumn columnLocation;
            
            private DataColumn columnPlatform;
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn columnHasMasterRight;
            
            private DataColumn columnHasVideoRight;
            
            private DataColumn columnLicensingEntity;
            
            private DataColumn columnTerritory;
            
            private DataColumn columnelement_Id;
            
            private DataColumn columnEncodedAudioFiles_Id;
            
            private DataColumn columnGenres_Id;
            
            private DataColumn columnWriters_Id;
            
            private DataColumn columnLabels_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementDataTable() {
                this.TableName = "element";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal elementDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected elementDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PlatformColumn {
                get {
                    return this.columnPlatform;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasMasterRightColumn {
                get {
                    return this.columnHasMasterRight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasVideoRightColumn {
                get {
                    return this.columnHasVideoRight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LicensingEntityColumn {
                get {
                    return this.columnLicensingEntity;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TerritoryColumn {
                get {
                    return this.columnTerritory;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn element_IdColumn {
                get {
                    return this.columnelement_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EncodedAudioFiles_IdColumn {
                get {
                    return this.columnEncodedAudioFiles_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Genres_IdColumn {
                get {
                    return this.columnGenres_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Writers_IdColumn {
                get {
                    return this.columnWriters_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Labels_IdColumn {
                get {
                    return this.columnLabels_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow this[int index] {
                get {
                    return ((elementRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event elementRowChangeEventHandler elementRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event elementRowChangeEventHandler elementRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event elementRowChangeEventHandler elementRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event elementRowChangeEventHandler elementRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddelementRow(elementRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow AddelementRow(string Location, string Platform, string Id, string Name, string HasMasterRight, string HasVideoRight, string LicensingEntity, string Territory, EncodedAudioFilesRow parentEncodedAudioFilesRowByEncodedAudioFiles_element, GenresRow parentGenresRowByGenres_element, WritersRow parentWritersRowByWriters_element, LabelsRow parentLabelsRowByLabels_element) {
                elementRow rowelementRow = ((elementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Location,
                        Platform,
                        Id,
                        Name,
                        HasMasterRight,
                        HasVideoRight,
                        LicensingEntity,
                        Territory,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentEncodedAudioFilesRowByEncodedAudioFiles_element != null)) {
                    columnValuesArray[9] = parentEncodedAudioFilesRowByEncodedAudioFiles_element[0];
                }
                if ((parentGenresRowByGenres_element != null)) {
                    columnValuesArray[10] = parentGenresRowByGenres_element[0];
                }
                if ((parentWritersRowByWriters_element != null)) {
                    columnValuesArray[11] = parentWritersRowByWriters_element[0];
                }
                if ((parentLabelsRowByLabels_element != null)) {
                    columnValuesArray[12] = parentLabelsRowByLabels_element[0];
                }
                rowelementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowelementRow);
                return rowelementRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                elementDataTable cln = ((elementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new elementDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnLocation = base.Columns["Location"];
                this.columnPlatform = base.Columns["Platform"];
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnHasMasterRight = base.Columns["HasMasterRight"];
                this.columnHasVideoRight = base.Columns["HasVideoRight"];
                this.columnLicensingEntity = base.Columns["LicensingEntity"];
                this.columnTerritory = base.Columns["Territory"];
                this.columnelement_Id = base.Columns["element_Id"];
                this.columnEncodedAudioFiles_Id = base.Columns["EncodedAudioFiles_Id"];
                this.columnGenres_Id = base.Columns["Genres_Id"];
                this.columnWriters_Id = base.Columns["Writers_Id"];
                this.columnLabels_Id = base.Columns["Labels_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnLocation = new DataColumn("Location", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnPlatform = new DataColumn("Platform", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPlatform);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnHasMasterRight = new DataColumn("HasMasterRight", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasMasterRight);
                this.columnHasVideoRight = new DataColumn("HasVideoRight", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasVideoRight);
                this.columnLicensingEntity = new DataColumn("LicensingEntity", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLicensingEntity);
                this.columnTerritory = new DataColumn("Territory", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerritory);
                this.columnelement_Id = new DataColumn("element_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnelement_Id);
                this.columnEncodedAudioFiles_Id = new DataColumn("EncodedAudioFiles_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnEncodedAudioFiles_Id);
                this.columnGenres_Id = new DataColumn("Genres_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnGenres_Id);
                this.columnWriters_Id = new DataColumn("Writers_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnWriters_Id);
                this.columnLabels_Id = new DataColumn("Labels_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnLabels_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnelement_Id}, true));
                this.columnelement_Id.AutoIncrement = true;
                this.columnelement_Id.AllowDBNull = false;
                this.columnelement_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow NewelementRow() {
                return ((elementRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new elementRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(elementRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.elementRowChanged != null)) {
                    this.elementRowChanged(this, new elementRowChangeEvent(((elementRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.elementRowChanging != null)) {
                    this.elementRowChanging(this, new elementRowChangeEvent(((elementRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.elementRowDeleted != null)) {
                    this.elementRowDeleted(this, new elementRowChangeEvent(((elementRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.elementRowDeleting != null)) {
                    this.elementRowDeleting(this, new elementRowChangeEvent(((elementRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveelementRow(elementRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "elementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ParentGenreDataTable : TypedTableBase<ParentGenreRow> {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn column_null;
            
            private DataColumn columnelement_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreDataTable() {
                this.TableName = "ParentGenre";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParentGenreDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ParentGenreDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn _nullColumn {
                get {
                    return this.column_null;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn element_IdColumn {
                get {
                    return this.columnelement_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRow this[int index] {
                get {
                    return ((ParentGenreRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentGenreRowChangeEventHandler ParentGenreRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentGenreRowChangeEventHandler ParentGenreRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentGenreRowChangeEventHandler ParentGenreRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentGenreRowChangeEventHandler ParentGenreRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddParentGenreRow(ParentGenreRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRow AddParentGenreRow(string Id, string Name, string _null, elementRow parentelementRowByelement_ParentGenre) {
                ParentGenreRow rowParentGenreRow = ((ParentGenreRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name,
                        _null,
                        null};
                if ((parentelementRowByelement_ParentGenre != null)) {
                    columnValuesArray[3] = parentelementRowByelement_ParentGenre[8];
                }
                rowParentGenreRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParentGenreRow);
                return rowParentGenreRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                ParentGenreDataTable cln = ((ParentGenreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new ParentGenreDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.column_null = base.Columns["null"];
                this.columnelement_Id = base.Columns["element_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.column_null = new DataColumn("null", typeof(string), null, MappingType.Attribute);
                base.Columns.Add(this.column_null);
                this.columnelement_Id = new DataColumn("element_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnelement_Id);
                this.column_null.Namespace = "";
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRow NewParentGenreRow() {
                return ((ParentGenreRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ParentGenreRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(ParentGenreRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParentGenreRowChanged != null)) {
                    this.ParentGenreRowChanged(this, new ParentGenreRowChangeEvent(((ParentGenreRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParentGenreRowChanging != null)) {
                    this.ParentGenreRowChanging(this, new ParentGenreRowChangeEvent(((ParentGenreRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParentGenreRowDeleted != null)) {
                    this.ParentGenreRowDeleted(this, new ParentGenreRowChangeEvent(((ParentGenreRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParentGenreRowDeleting != null)) {
                    this.ParentGenreRowDeleting(this, new ParentGenreRowChangeEvent(((ParentGenreRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveParentGenreRow(ParentGenreRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParentGenreDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class UpdatedByDataTable : TypedTableBase<UpdatedByRow> {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn columnemail;
            
            private DataColumn columnPrimaryArtist_Id;
            
            private DataColumn columnPublisher_Id;
            
            private DataColumn columnMusicalWork_Id;
            
            private DataColumn columnPhysicalDisc_Id;
            
            private DataColumn columnRelease_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByDataTable() {
                this.TableName = "UpdatedBy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal UpdatedByDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected UpdatedByDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrimaryArtist_IdColumn {
                get {
                    return this.columnPrimaryArtist_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Publisher_IdColumn {
                get {
                    return this.columnPublisher_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MusicalWork_IdColumn {
                get {
                    return this.columnMusicalWork_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PhysicalDisc_IdColumn {
                get {
                    return this.columnPhysicalDisc_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow this[int index] {
                get {
                    return ((UpdatedByRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UpdatedByRowChangeEventHandler UpdatedByRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UpdatedByRowChangeEventHandler UpdatedByRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UpdatedByRowChangeEventHandler UpdatedByRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event UpdatedByRowChangeEventHandler UpdatedByRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddUpdatedByRow(UpdatedByRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow AddUpdatedByRow(string Id, string Name, string email, PrimaryArtistRow parentPrimaryArtistRowByPrimaryArtist_UpdatedBy, PublisherRow parentPublisherRowByPublisher_UpdatedBy, MusicalWorkRow parentMusicalWorkRowByMusicalWork_UpdatedBy, PhysicalDiscRow parentPhysicalDiscRowByPhysicalDisc_UpdatedBy, ReleaseRow parentReleaseRowByRelease_UpdatedBy, TrackRow parentTrackRowByTrack_UpdatedBy) {
                UpdatedByRow rowUpdatedByRow = ((UpdatedByRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name,
                        email,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentPrimaryArtistRowByPrimaryArtist_UpdatedBy != null)) {
                    columnValuesArray[3] = parentPrimaryArtistRowByPrimaryArtist_UpdatedBy[10];
                }
                if ((parentPublisherRowByPublisher_UpdatedBy != null)) {
                    columnValuesArray[4] = parentPublisherRowByPublisher_UpdatedBy[10];
                }
                if ((parentMusicalWorkRowByMusicalWork_UpdatedBy != null)) {
                    columnValuesArray[5] = parentMusicalWorkRowByMusicalWork_UpdatedBy[6];
                }
                if ((parentPhysicalDiscRowByPhysicalDisc_UpdatedBy != null)) {
                    columnValuesArray[6] = parentPhysicalDiscRowByPhysicalDisc_UpdatedBy[6];
                }
                if ((parentReleaseRowByRelease_UpdatedBy != null)) {
                    columnValuesArray[7] = parentReleaseRowByRelease_UpdatedBy[12];
                }
                if ((parentTrackRowByTrack_UpdatedBy != null)) {
                    columnValuesArray[8] = parentTrackRowByTrack_UpdatedBy[16];
                }
                rowUpdatedByRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUpdatedByRow);
                return rowUpdatedByRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                UpdatedByDataTable cln = ((UpdatedByDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new UpdatedByDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnemail = base.Columns["email"];
                this.columnPrimaryArtist_Id = base.Columns["PrimaryArtist_Id"];
                this.columnPublisher_Id = base.Columns["Publisher_Id"];
                this.columnMusicalWork_Id = base.Columns["MusicalWork_Id"];
                this.columnPhysicalDisc_Id = base.Columns["PhysicalDisc_Id"];
                this.columnRelease_Id = base.Columns["Release_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnemail = new DataColumn("email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnPrimaryArtist_Id = new DataColumn("PrimaryArtist_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPrimaryArtist_Id);
                this.columnPublisher_Id = new DataColumn("Publisher_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPublisher_Id);
                this.columnMusicalWork_Id = new DataColumn("MusicalWork_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnMusicalWork_Id);
                this.columnPhysicalDisc_Id = new DataColumn("PhysicalDisc_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPhysicalDisc_Id);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow NewUpdatedByRow() {
                return ((UpdatedByRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UpdatedByRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(UpdatedByRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UpdatedByRowChanged != null)) {
                    this.UpdatedByRowChanged(this, new UpdatedByRowChangeEvent(((UpdatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UpdatedByRowChanging != null)) {
                    this.UpdatedByRowChanging(this, new UpdatedByRowChangeEvent(((UpdatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UpdatedByRowDeleted != null)) {
                    this.UpdatedByRowDeleted(this, new UpdatedByRowChangeEvent(((UpdatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UpdatedByRowDeleting != null)) {
                    this.UpdatedByRowDeleting(this, new UpdatedByRowChangeEvent(((UpdatedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveUpdatedByRow(UpdatedByRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UpdatedByDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PrimaryArtistDataTable : TypedTableBase<PrimaryArtistRow> {
            
            private DataColumn columnCountry;
            
            private DataColumn columnCreated;
            
            private DataColumn columnDescription;
            
            private DataColumn columnDisplayName;
            
            private DataColumn columnGuid;
            
            private DataColumn columnId;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnIsGroup;
            
            private DataColumn columnName;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnPrimaryArtist_Id;
            
            private DataColumn columnRelease_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistDataTable() {
                this.TableName = "PrimaryArtist";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PrimaryArtistDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PrimaryArtistDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn GuidColumn {
                get {
                    return this.columnGuid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsGroupColumn {
                get {
                    return this.columnIsGroup;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrimaryArtist_IdColumn {
                get {
                    return this.columnPrimaryArtist_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow this[int index] {
                get {
                    return ((PrimaryArtistRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PrimaryArtistRowChangeEventHandler PrimaryArtistRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PrimaryArtistRowChangeEventHandler PrimaryArtistRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PrimaryArtistRowChangeEventHandler PrimaryArtistRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PrimaryArtistRowChangeEventHandler PrimaryArtistRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPrimaryArtistRow(PrimaryArtistRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow AddPrimaryArtistRow(string Country, string Created, string Description, string DisplayName, string Guid, string Id, string IsActive, string IsGroup, string Name, string Updated, ReleaseRow parentReleaseRowByRelease_PrimaryArtist, TrackRow parentTrackRowByTrack_PrimaryArtist) {
                PrimaryArtistRow rowPrimaryArtistRow = ((PrimaryArtistRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Country,
                        Created,
                        Description,
                        DisplayName,
                        Guid,
                        Id,
                        IsActive,
                        IsGroup,
                        Name,
                        Updated,
                        null,
                        null,
                        null};
                if ((parentReleaseRowByRelease_PrimaryArtist != null)) {
                    columnValuesArray[11] = parentReleaseRowByRelease_PrimaryArtist[12];
                }
                if ((parentTrackRowByTrack_PrimaryArtist != null)) {
                    columnValuesArray[12] = parentTrackRowByTrack_PrimaryArtist[16];
                }
                rowPrimaryArtistRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrimaryArtistRow);
                return rowPrimaryArtistRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                PrimaryArtistDataTable cln = ((PrimaryArtistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new PrimaryArtistDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCountry = base.Columns["Country"];
                this.columnCreated = base.Columns["Created"];
                this.columnDescription = base.Columns["Description"];
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnGuid = base.Columns["Guid"];
                this.columnId = base.Columns["Id"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsGroup = base.Columns["IsGroup"];
                this.columnName = base.Columns["Name"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnPrimaryArtist_Id = base.Columns["PrimaryArtist_Id"];
                this.columnRelease_Id = base.Columns["Release_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCountry = new DataColumn("Country", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnDescription = new DataColumn("Description", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDisplayName = new DataColumn("DisplayName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnGuid = new DataColumn("Guid", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnGuid);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIsActive = new DataColumn("IsActive", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsGroup = new DataColumn("IsGroup", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsGroup);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnPrimaryArtist_Id = new DataColumn("PrimaryArtist_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPrimaryArtist_Id);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPrimaryArtist_Id}, true));
                this.columnPrimaryArtist_Id.AutoIncrement = true;
                this.columnPrimaryArtist_Id.AllowDBNull = false;
                this.columnPrimaryArtist_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow NewPrimaryArtistRow() {
                return ((PrimaryArtistRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PrimaryArtistRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(PrimaryArtistRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrimaryArtistRowChanged != null)) {
                    this.PrimaryArtistRowChanged(this, new PrimaryArtistRowChangeEvent(((PrimaryArtistRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrimaryArtistRowChanging != null)) {
                    this.PrimaryArtistRowChanging(this, new PrimaryArtistRowChangeEvent(((PrimaryArtistRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrimaryArtistRowDeleted != null)) {
                    this.PrimaryArtistRowDeleted(this, new PrimaryArtistRowChangeEvent(((PrimaryArtistRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrimaryArtistRowDeleting != null)) {
                    this.PrimaryArtistRowDeleting(this, new PrimaryArtistRowChangeEvent(((PrimaryArtistRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePrimaryArtistRow(PrimaryArtistRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrimaryArtistDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class RequestedByDataTable : TypedTableBase<RequestedByRow> {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn columnemail;
            
            private DataColumn columnRelease_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByDataTable() {
                this.TableName = "RequestedBy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RequestedByDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RequestedByDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow this[int index] {
                get {
                    return ((RequestedByRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RequestedByRowChangeEventHandler RequestedByRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RequestedByRowChangeEventHandler RequestedByRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RequestedByRowChangeEventHandler RequestedByRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RequestedByRowChangeEventHandler RequestedByRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRequestedByRow(RequestedByRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow AddRequestedByRow(string Id, string Name, string email, ReleaseRow parentReleaseRowByRelease_RequestedBy, TrackRow parentTrackRowByTrack_RequestedBy) {
                RequestedByRow rowRequestedByRow = ((RequestedByRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Name,
                        email,
                        null,
                        null};
                if ((parentReleaseRowByRelease_RequestedBy != null)) {
                    columnValuesArray[3] = parentReleaseRowByRelease_RequestedBy[12];
                }
                if ((parentTrackRowByTrack_RequestedBy != null)) {
                    columnValuesArray[4] = parentTrackRowByTrack_RequestedBy[16];
                }
                rowRequestedByRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequestedByRow);
                return rowRequestedByRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                RequestedByDataTable cln = ((RequestedByDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new RequestedByDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnemail = base.Columns["email"];
                this.columnRelease_Id = base.Columns["Release_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnemail = new DataColumn("email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow NewRequestedByRow() {
                return ((RequestedByRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RequestedByRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(RequestedByRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RequestedByRowChanged != null)) {
                    this.RequestedByRowChanged(this, new RequestedByRowChangeEvent(((RequestedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RequestedByRowChanging != null)) {
                    this.RequestedByRowChanging(this, new RequestedByRowChangeEvent(((RequestedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RequestedByRowDeleted != null)) {
                    this.RequestedByRowDeleted(this, new RequestedByRowChangeEvent(((RequestedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RequestedByRowDeleting != null)) {
                    this.RequestedByRowDeleting(this, new RequestedByRowChangeEvent(((RequestedByRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRequestedByRow(RequestedByRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RequestedByDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class TrackDataTable : TypedTableBase<TrackRow> {
            
            private DataColumn columnBeatsPerMinute;
            
            private DataColumn columnCreated;
            
            private DataColumn columnDisplayTitle;
            
            private DataColumn columnDuration;
            
            private DataColumn columnGuid;
            
            private DataColumn columnISRC;
            
            private DataColumn columnId;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnIsInstrumental;
            
            private DataColumn columnLabels;
            
            private DataColumn columnRequested;
            
            private DataColumn columnTitle;
            
            private DataColumn columnTrackNumber;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnVocalGender;
            
            private DataColumn columnYear;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackDataTable() {
                this.TableName = "Track";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TrackDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TrackDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BeatsPerMinuteColumn {
                get {
                    return this.columnBeatsPerMinute;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DisplayTitleColumn {
                get {
                    return this.columnDisplayTitle;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DurationColumn {
                get {
                    return this.columnDuration;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn GuidColumn {
                get {
                    return this.columnGuid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ISRCColumn {
                get {
                    return this.columnISRC;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsInstrumentalColumn {
                get {
                    return this.columnIsInstrumental;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LabelsColumn {
                get {
                    return this.columnLabels;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RequestedColumn {
                get {
                    return this.columnRequested;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn VocalGenderColumn {
                get {
                    return this.columnVocalGender;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow this[int index] {
                get {
                    return ((TrackRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TrackRowChangeEventHandler TrackRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TrackRowChangeEventHandler TrackRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TrackRowChangeEventHandler TrackRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TrackRowChangeEventHandler TrackRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTrackRow(TrackRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow AddTrackRow(
                        string BeatsPerMinute, 
                        string Created, 
                        string DisplayTitle, 
                        string Duration, 
                        string Guid, 
                        string ISRC, 
                        string Id, 
                        string IsActive, 
                        string IsInstrumental, 
                        string Labels, 
                        string Requested, 
                        string Title, 
                        string TrackNumber, 
                        string Updated, 
                        string VocalGender, 
                        string Year) {
                TrackRow rowTrackRow = ((TrackRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BeatsPerMinute,
                        Created,
                        DisplayTitle,
                        Duration,
                        Guid,
                        ISRC,
                        Id,
                        IsActive,
                        IsInstrumental,
                        Labels,
                        Requested,
                        Title,
                        TrackNumber,
                        Updated,
                        VocalGender,
                        Year,
                        null};
                rowTrackRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrackRow);
                return rowTrackRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                TrackDataTable cln = ((TrackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new TrackDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnBeatsPerMinute = base.Columns["BeatsPerMinute"];
                this.columnCreated = base.Columns["Created"];
                this.columnDisplayTitle = base.Columns["DisplayTitle"];
                this.columnDuration = base.Columns["Duration"];
                this.columnGuid = base.Columns["Guid"];
                this.columnISRC = base.Columns["ISRC"];
                this.columnId = base.Columns["Id"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsInstrumental = base.Columns["IsInstrumental"];
                this.columnLabels = base.Columns["Labels"];
                this.columnRequested = base.Columns["Requested"];
                this.columnTitle = base.Columns["Title"];
                this.columnTrackNumber = base.Columns["TrackNumber"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnVocalGender = base.Columns["VocalGender"];
                this.columnYear = base.Columns["Year"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnBeatsPerMinute = new DataColumn("BeatsPerMinute", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBeatsPerMinute);
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnDisplayTitle = new DataColumn("DisplayTitle", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDisplayTitle);
                this.columnDuration = new DataColumn("Duration", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDuration);
                this.columnGuid = new DataColumn("Guid", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnGuid);
                this.columnISRC = new DataColumn("ISRC", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnISRC);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIsActive = new DataColumn("IsActive", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsInstrumental = new DataColumn("IsInstrumental", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsInstrumental);
                this.columnLabels = new DataColumn("Labels", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLabels);
                this.columnRequested = new DataColumn("Requested", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRequested);
                this.columnTitle = new DataColumn("Title", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnTrackNumber = new DataColumn("TrackNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTrackNumber);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnVocalGender = new DataColumn("VocalGender", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnVocalGender);
                this.columnYear = new DataColumn("Year", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTrack_Id}, true));
                this.columnTrack_Id.AutoIncrement = true;
                this.columnTrack_Id.AllowDBNull = false;
                this.columnTrack_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow NewTrackRow() {
                return ((TrackRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TrackRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(TrackRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackRowChanged != null)) {
                    this.TrackRowChanged(this, new TrackRowChangeEvent(((TrackRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackRowChanging != null)) {
                    this.TrackRowChanging(this, new TrackRowChangeEvent(((TrackRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackRowDeleted != null)) {
                    this.TrackRowDeleted(this, new TrackRowChangeEvent(((TrackRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackRowDeleting != null)) {
                    this.TrackRowDeleting(this, new TrackRowChangeEvent(((TrackRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTrackRow(TrackRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class EncodedAudioFilesDataTable : TypedTableBase<EncodedAudioFilesRow> {
            
            private DataColumn columnEncodedAudioFiles_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesDataTable() {
                this.TableName = "EncodedAudioFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EncodedAudioFilesDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EncodedAudioFilesDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EncodedAudioFiles_IdColumn {
                get {
                    return this.columnEncodedAudioFiles_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow this[int index] {
                get {
                    return ((EncodedAudioFilesRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EncodedAudioFilesRowChangeEventHandler EncodedAudioFilesRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EncodedAudioFilesRowChangeEventHandler EncodedAudioFilesRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EncodedAudioFilesRowChangeEventHandler EncodedAudioFilesRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EncodedAudioFilesRowChangeEventHandler EncodedAudioFilesRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEncodedAudioFilesRow(EncodedAudioFilesRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow AddEncodedAudioFilesRow(TrackRow parentTrackRowByTrack_EncodedAudioFiles) {
                EncodedAudioFilesRow rowEncodedAudioFilesRow = ((EncodedAudioFilesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTrackRowByTrack_EncodedAudioFiles != null)) {
                    columnValuesArray[1] = parentTrackRowByTrack_EncodedAudioFiles[16];
                }
                rowEncodedAudioFilesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEncodedAudioFilesRow);
                return rowEncodedAudioFilesRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                EncodedAudioFilesDataTable cln = ((EncodedAudioFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new EncodedAudioFilesDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnEncodedAudioFiles_Id = base.Columns["EncodedAudioFiles_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnEncodedAudioFiles_Id = new DataColumn("EncodedAudioFiles_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnEncodedAudioFiles_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEncodedAudioFiles_Id}, true));
                this.columnEncodedAudioFiles_Id.AutoIncrement = true;
                this.columnEncodedAudioFiles_Id.AllowDBNull = false;
                this.columnEncodedAudioFiles_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow NewEncodedAudioFilesRow() {
                return ((EncodedAudioFilesRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EncodedAudioFilesRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(EncodedAudioFilesRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EncodedAudioFilesRowChanged != null)) {
                    this.EncodedAudioFilesRowChanged(this, new EncodedAudioFilesRowChangeEvent(((EncodedAudioFilesRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EncodedAudioFilesRowChanging != null)) {
                    this.EncodedAudioFilesRowChanging(this, new EncodedAudioFilesRowChangeEvent(((EncodedAudioFilesRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EncodedAudioFilesRowDeleted != null)) {
                    this.EncodedAudioFilesRowDeleted(this, new EncodedAudioFilesRowChangeEvent(((EncodedAudioFilesRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EncodedAudioFilesRowDeleting != null)) {
                    this.EncodedAudioFilesRowDeleting(this, new EncodedAudioFilesRowChangeEvent(((EncodedAudioFilesRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEncodedAudioFilesRow(EncodedAudioFilesRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EncodedAudioFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class GenresDataTable : TypedTableBase<GenresRow> {
            
            private DataColumn columnGenres_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresDataTable() {
                this.TableName = "Genres";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GenresDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GenresDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Genres_IdColumn {
                get {
                    return this.columnGenres_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow this[int index] {
                get {
                    return ((GenresRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GenresRowChangeEventHandler GenresRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GenresRowChangeEventHandler GenresRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GenresRowChangeEventHandler GenresRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GenresRowChangeEventHandler GenresRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGenresRow(GenresRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow AddGenresRow(TrackRow parentTrackRowByTrack_Genres) {
                GenresRow rowGenresRow = ((GenresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTrackRowByTrack_Genres != null)) {
                    columnValuesArray[1] = parentTrackRowByTrack_Genres[16];
                }
                rowGenresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGenresRow);
                return rowGenresRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                GenresDataTable cln = ((GenresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new GenresDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnGenres_Id = base.Columns["Genres_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnGenres_Id = new DataColumn("Genres_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnGenres_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnGenres_Id}, true));
                this.columnGenres_Id.AutoIncrement = true;
                this.columnGenres_Id.AllowDBNull = false;
                this.columnGenres_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow NewGenresRow() {
                return ((GenresRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GenresRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(GenresRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenresRowChanged != null)) {
                    this.GenresRowChanged(this, new GenresRowChangeEvent(((GenresRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenresRowChanging != null)) {
                    this.GenresRowChanging(this, new GenresRowChangeEvent(((GenresRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenresRowDeleted != null)) {
                    this.GenresRowDeleted(this, new GenresRowChangeEvent(((GenresRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenresRowDeleting != null)) {
                    this.GenresRowDeleting(this, new GenresRowChangeEvent(((GenresRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGenresRow(GenresRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class MusicalWorkDataTable : TypedTableBase<MusicalWorkRow> {
            
            private DataColumn columnCircleC;
            
            private DataColumn columnCreated;
            
            private DataColumn columnHFACode;
            
            private DataColumn columnId;
            
            private DataColumn columnTitle;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnMusicalWork_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkDataTable() {
                this.TableName = "MusicalWork";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MusicalWorkDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected MusicalWorkDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CircleCColumn {
                get {
                    return this.columnCircleC;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HFACodeColumn {
                get {
                    return this.columnHFACode;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MusicalWork_IdColumn {
                get {
                    return this.columnMusicalWork_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow this[int index] {
                get {
                    return ((MusicalWorkRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MusicalWorkRowChangeEventHandler MusicalWorkRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MusicalWorkRowChangeEventHandler MusicalWorkRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MusicalWorkRowChangeEventHandler MusicalWorkRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MusicalWorkRowChangeEventHandler MusicalWorkRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddMusicalWorkRow(MusicalWorkRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow AddMusicalWorkRow(string CircleC, string Created, string HFACode, string Id, string Title, string Updated, TrackRow parentTrackRowByTrack_MusicalWork) {
                MusicalWorkRow rowMusicalWorkRow = ((MusicalWorkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CircleC,
                        Created,
                        HFACode,
                        Id,
                        Title,
                        Updated,
                        null,
                        null};
                if ((parentTrackRowByTrack_MusicalWork != null)) {
                    columnValuesArray[7] = parentTrackRowByTrack_MusicalWork[16];
                }
                rowMusicalWorkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMusicalWorkRow);
                return rowMusicalWorkRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                MusicalWorkDataTable cln = ((MusicalWorkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new MusicalWorkDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCircleC = base.Columns["CircleC"];
                this.columnCreated = base.Columns["Created"];
                this.columnHFACode = base.Columns["HFACode"];
                this.columnId = base.Columns["Id"];
                this.columnTitle = base.Columns["Title"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnMusicalWork_Id = base.Columns["MusicalWork_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCircleC = new DataColumn("CircleC", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCircleC);
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnHFACode = new DataColumn("HFACode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHFACode);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnTitle = new DataColumn("Title", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnMusicalWork_Id = new DataColumn("MusicalWork_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnMusicalWork_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMusicalWork_Id}, true));
                this.columnMusicalWork_Id.AutoIncrement = true;
                this.columnMusicalWork_Id.AllowDBNull = false;
                this.columnMusicalWork_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow NewMusicalWorkRow() {
                return ((MusicalWorkRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MusicalWorkRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(MusicalWorkRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MusicalWorkRowChanged != null)) {
                    this.MusicalWorkRowChanged(this, new MusicalWorkRowChangeEvent(((MusicalWorkRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MusicalWorkRowChanging != null)) {
                    this.MusicalWorkRowChanging(this, new MusicalWorkRowChangeEvent(((MusicalWorkRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MusicalWorkRowDeleted != null)) {
                    this.MusicalWorkRowDeleted(this, new MusicalWorkRowChangeEvent(((MusicalWorkRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MusicalWorkRowDeleting != null)) {
                    this.MusicalWorkRowDeleting(this, new MusicalWorkRowChangeEvent(((MusicalWorkRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMusicalWorkRow(MusicalWorkRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MusicalWorkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PublishersDataTable : TypedTableBase<PublishersRow> {
            
            private DataColumn columnPublishers_Id;
            
            private DataColumn columnMusicalWork_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersDataTable() {
                this.TableName = "Publishers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PublishersDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PublishersDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Publishers_IdColumn {
                get {
                    return this.columnPublishers_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MusicalWork_IdColumn {
                get {
                    return this.columnMusicalWork_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow this[int index] {
                get {
                    return ((PublishersRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublishersRowChangeEventHandler PublishersRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublishersRowChangeEventHandler PublishersRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublishersRowChangeEventHandler PublishersRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublishersRowChangeEventHandler PublishersRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPublishersRow(PublishersRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow AddPublishersRow(MusicalWorkRow parentMusicalWorkRowByMusicalWork_Publishers) {
                PublishersRow rowPublishersRow = ((PublishersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentMusicalWorkRowByMusicalWork_Publishers != null)) {
                    columnValuesArray[1] = parentMusicalWorkRowByMusicalWork_Publishers[6];
                }
                rowPublishersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPublishersRow);
                return rowPublishersRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                PublishersDataTable cln = ((PublishersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new PublishersDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPublishers_Id = base.Columns["Publishers_Id"];
                this.columnMusicalWork_Id = base.Columns["MusicalWork_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPublishers_Id = new DataColumn("Publishers_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPublishers_Id);
                this.columnMusicalWork_Id = new DataColumn("MusicalWork_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnMusicalWork_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPublishers_Id}, true));
                this.columnPublishers_Id.AutoIncrement = true;
                this.columnPublishers_Id.AllowDBNull = false;
                this.columnPublishers_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow NewPublishersRow() {
                return ((PublishersRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PublishersRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(PublishersRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PublishersRowChanged != null)) {
                    this.PublishersRowChanged(this, new PublishersRowChangeEvent(((PublishersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PublishersRowChanging != null)) {
                    this.PublishersRowChanging(this, new PublishersRowChangeEvent(((PublishersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PublishersRowDeleted != null)) {
                    this.PublishersRowDeleted(this, new PublishersRowChangeEvent(((PublishersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PublishersRowDeleting != null)) {
                    this.PublishersRowDeleting(this, new PublishersRowChangeEvent(((PublishersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePublishersRow(PublishersRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PublishersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PublisherDataTable : TypedTableBase<PublisherRow> {
            
            private DataColumn columnCreated;
            
            private DataColumn columnHasInternationalClearance;
            
            private DataColumn columnHasMechanicalRight;
            
            private DataColumn columnHasPerformanceRight;
            
            private DataColumn columnHasVideoRight;
            
            private DataColumn columnId;
            
            private DataColumn columnSplit;
            
            private DataColumn columnTerritory;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnname;
            
            private DataColumn columnPublisher_Id;
            
            private DataColumn columnPublishers_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherDataTable() {
                this.TableName = "Publisher";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PublisherDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PublisherDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasInternationalClearanceColumn {
                get {
                    return this.columnHasInternationalClearance;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasMechanicalRightColumn {
                get {
                    return this.columnHasMechanicalRight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasPerformanceRightColumn {
                get {
                    return this.columnHasPerformanceRight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HasVideoRightColumn {
                get {
                    return this.columnHasVideoRight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SplitColumn {
                get {
                    return this.columnSplit;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TerritoryColumn {
                get {
                    return this.columnTerritory;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Publisher_IdColumn {
                get {
                    return this.columnPublisher_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Publishers_IdColumn {
                get {
                    return this.columnPublishers_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow this[int index] {
                get {
                    return ((PublisherRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublisherRowChangeEventHandler PublisherRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublisherRowChangeEventHandler PublisherRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublisherRowChangeEventHandler PublisherRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PublisherRowChangeEventHandler PublisherRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPublisherRow(PublisherRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow AddPublisherRow(string Created, string HasInternationalClearance, string HasMechanicalRight, string HasPerformanceRight, string HasVideoRight, string Id, string Split, string Territory, string Updated, string name, PublishersRow parentPublishersRowByPublishers_Publisher) {
                PublisherRow rowPublisherRow = ((PublisherRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Created,
                        HasInternationalClearance,
                        HasMechanicalRight,
                        HasPerformanceRight,
                        HasVideoRight,
                        Id,
                        Split,
                        Territory,
                        Updated,
                        name,
                        null,
                        null};
                if ((parentPublishersRowByPublishers_Publisher != null)) {
                    columnValuesArray[11] = parentPublishersRowByPublishers_Publisher[0];
                }
                rowPublisherRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPublisherRow);
                return rowPublisherRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                PublisherDataTable cln = ((PublisherDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new PublisherDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCreated = base.Columns["Created"];
                this.columnHasInternationalClearance = base.Columns["HasInternationalClearance"];
                this.columnHasMechanicalRight = base.Columns["HasMechanicalRight"];
                this.columnHasPerformanceRight = base.Columns["HasPerformanceRight"];
                this.columnHasVideoRight = base.Columns["HasVideoRight"];
                this.columnId = base.Columns["Id"];
                this.columnSplit = base.Columns["Split"];
                this.columnTerritory = base.Columns["Territory"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnname = base.Columns["name"];
                this.columnPublisher_Id = base.Columns["Publisher_Id"];
                this.columnPublishers_Id = base.Columns["Publishers_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnHasInternationalClearance = new DataColumn("HasInternationalClearance", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasInternationalClearance);
                this.columnHasMechanicalRight = new DataColumn("HasMechanicalRight", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasMechanicalRight);
                this.columnHasPerformanceRight = new DataColumn("HasPerformanceRight", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasPerformanceRight);
                this.columnHasVideoRight = new DataColumn("HasVideoRight", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHasVideoRight);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSplit = new DataColumn("Split", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSplit);
                this.columnTerritory = new DataColumn("Territory", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerritory);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnPublisher_Id = new DataColumn("Publisher_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPublisher_Id);
                this.columnPublishers_Id = new DataColumn("Publishers_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPublishers_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPublisher_Id}, true));
                this.columnPublisher_Id.AutoIncrement = true;
                this.columnPublisher_Id.AllowDBNull = false;
                this.columnPublisher_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow NewPublisherRow() {
                return ((PublisherRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PublisherRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(PublisherRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PublisherRowChanged != null)) {
                    this.PublisherRowChanged(this, new PublisherRowChangeEvent(((PublisherRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PublisherRowChanging != null)) {
                    this.PublisherRowChanging(this, new PublisherRowChangeEvent(((PublisherRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PublisherRowDeleted != null)) {
                    this.PublisherRowDeleted(this, new PublisherRowChangeEvent(((PublisherRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PublisherRowDeleting != null)) {
                    this.PublisherRowDeleting(this, new PublisherRowChangeEvent(((PublisherRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePublisherRow(PublisherRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PublisherDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class WritersDataTable : TypedTableBase<WritersRow> {
            
            private DataColumn columnWriters_Id;
            
            private DataColumn columnMusicalWork_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersDataTable() {
                this.TableName = "Writers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal WritersDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected WritersDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Writers_IdColumn {
                get {
                    return this.columnWriters_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MusicalWork_IdColumn {
                get {
                    return this.columnMusicalWork_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow this[int index] {
                get {
                    return ((WritersRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WritersRowChangeEventHandler WritersRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WritersRowChangeEventHandler WritersRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WritersRowChangeEventHandler WritersRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WritersRowChangeEventHandler WritersRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddWritersRow(WritersRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow AddWritersRow(MusicalWorkRow parentMusicalWorkRowByMusicalWork_Writers) {
                WritersRow rowWritersRow = ((WritersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentMusicalWorkRowByMusicalWork_Writers != null)) {
                    columnValuesArray[1] = parentMusicalWorkRowByMusicalWork_Writers[6];
                }
                rowWritersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWritersRow);
                return rowWritersRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                WritersDataTable cln = ((WritersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new WritersDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnWriters_Id = base.Columns["Writers_Id"];
                this.columnMusicalWork_Id = base.Columns["MusicalWork_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnWriters_Id = new DataColumn("Writers_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnWriters_Id);
                this.columnMusicalWork_Id = new DataColumn("MusicalWork_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnMusicalWork_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnWriters_Id}, true));
                this.columnWriters_Id.AutoIncrement = true;
                this.columnWriters_Id.AllowDBNull = false;
                this.columnWriters_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow NewWritersRow() {
                return ((WritersRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WritersRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(WritersRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WritersRowChanged != null)) {
                    this.WritersRowChanged(this, new WritersRowChangeEvent(((WritersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WritersRowChanging != null)) {
                    this.WritersRowChanging(this, new WritersRowChangeEvent(((WritersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WritersRowDeleted != null)) {
                    this.WritersRowDeleted(this, new WritersRowChangeEvent(((WritersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WritersRowDeleting != null)) {
                    this.WritersRowDeleting(this, new WritersRowChangeEvent(((WritersRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveWritersRow(WritersRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WritersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PhysicalDiscDataTable : TypedTableBase<PhysicalDiscRow> {
            
            private DataColumn columnCatelogNumber;
            
            private DataColumn columnCreated;
            
            private DataColumn columnDiscNumber;
            
            private DataColumn columnId;
            
            private DataColumn columnLocation;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnPhysicalDisc_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscDataTable() {
                this.TableName = "PhysicalDisc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PhysicalDiscDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PhysicalDiscDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CatelogNumberColumn {
                get {
                    return this.columnCatelogNumber;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DiscNumberColumn {
                get {
                    return this.columnDiscNumber;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PhysicalDisc_IdColumn {
                get {
                    return this.columnPhysicalDisc_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow this[int index] {
                get {
                    return ((PhysicalDiscRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PhysicalDiscRowChangeEventHandler PhysicalDiscRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PhysicalDiscRowChangeEventHandler PhysicalDiscRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PhysicalDiscRowChangeEventHandler PhysicalDiscRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PhysicalDiscRowChangeEventHandler PhysicalDiscRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPhysicalDiscRow(PhysicalDiscRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow AddPhysicalDiscRow(string CatelogNumber, string Created, string DiscNumber, string Id, string Location, string Updated, TrackRow parentTrackRowByTrack_PhysicalDisc) {
                PhysicalDiscRow rowPhysicalDiscRow = ((PhysicalDiscRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CatelogNumber,
                        Created,
                        DiscNumber,
                        Id,
                        Location,
                        Updated,
                        null,
                        null};
                if ((parentTrackRowByTrack_PhysicalDisc != null)) {
                    columnValuesArray[7] = parentTrackRowByTrack_PhysicalDisc[16];
                }
                rowPhysicalDiscRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPhysicalDiscRow);
                return rowPhysicalDiscRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                PhysicalDiscDataTable cln = ((PhysicalDiscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new PhysicalDiscDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCatelogNumber = base.Columns["CatelogNumber"];
                this.columnCreated = base.Columns["Created"];
                this.columnDiscNumber = base.Columns["DiscNumber"];
                this.columnId = base.Columns["Id"];
                this.columnLocation = base.Columns["Location"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnPhysicalDisc_Id = base.Columns["PhysicalDisc_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCatelogNumber = new DataColumn("CatelogNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCatelogNumber);
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnDiscNumber = new DataColumn("DiscNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDiscNumber);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnLocation = new DataColumn("Location", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnPhysicalDisc_Id = new DataColumn("PhysicalDisc_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnPhysicalDisc_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPhysicalDisc_Id}, true));
                this.columnPhysicalDisc_Id.AutoIncrement = true;
                this.columnPhysicalDisc_Id.AllowDBNull = false;
                this.columnPhysicalDisc_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow NewPhysicalDiscRow() {
                return ((PhysicalDiscRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PhysicalDiscRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(PhysicalDiscRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PhysicalDiscRowChanged != null)) {
                    this.PhysicalDiscRowChanged(this, new PhysicalDiscRowChangeEvent(((PhysicalDiscRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PhysicalDiscRowChanging != null)) {
                    this.PhysicalDiscRowChanging(this, new PhysicalDiscRowChangeEvent(((PhysicalDiscRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PhysicalDiscRowDeleted != null)) {
                    this.PhysicalDiscRowDeleted(this, new PhysicalDiscRowChangeEvent(((PhysicalDiscRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PhysicalDiscRowDeleting != null)) {
                    this.PhysicalDiscRowDeleting(this, new PhysicalDiscRowChangeEvent(((PhysicalDiscRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePhysicalDiscRow(PhysicalDiscRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PhysicalDiscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ReleaseDataTable : TypedTableBase<ReleaseRow> {
            
            private DataColumn columnCDDBID;
            
            private DataColumn columnCircleP;
            
            private DataColumn columnCreated;
            
            private DataColumn columnDisplayTitle;
            
            private DataColumn columnGuid;
            
            private DataColumn columnId;
            
            private DataColumn columnIsActive;
            
            private DataColumn columnIsCompilation;
            
            private DataColumn columnNumberOfTracks;
            
            private DataColumn columnRequested;
            
            private DataColumn columnTitle;
            
            private DataColumn columnUpdated;
            
            private DataColumn columnRelease_Id;
            
            private DataColumn columnTrack_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseDataTable() {
                this.TableName = "Release";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReleaseDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReleaseDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CDDBIDColumn {
                get {
                    return this.columnCDDBID;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CirclePColumn {
                get {
                    return this.columnCircleP;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DisplayTitleColumn {
                get {
                    return this.columnDisplayTitle;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn GuidColumn {
                get {
                    return this.columnGuid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsCompilationColumn {
                get {
                    return this.columnIsCompilation;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NumberOfTracksColumn {
                get {
                    return this.columnNumberOfTracks;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RequestedColumn {
                get {
                    return this.columnRequested;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UpdatedColumn {
                get {
                    return this.columnUpdated;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Track_IdColumn {
                get {
                    return this.columnTrack_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow this[int index] {
                get {
                    return ((ReleaseRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ReleaseRowChangeEventHandler ReleaseRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ReleaseRowChangeEventHandler ReleaseRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ReleaseRowChangeEventHandler ReleaseRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ReleaseRowChangeEventHandler ReleaseRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReleaseRow(ReleaseRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow AddReleaseRow(string CDDBID, string CircleP, string Created, string DisplayTitle, string Guid, string Id, string IsActive, string IsCompilation, string NumberOfTracks, string Requested, string Title, string Updated, TrackRow parentTrackRowByTrack_Release) {
                ReleaseRow rowReleaseRow = ((ReleaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CDDBID,
                        CircleP,
                        Created,
                        DisplayTitle,
                        Guid,
                        Id,
                        IsActive,
                        IsCompilation,
                        NumberOfTracks,
                        Requested,
                        Title,
                        Updated,
                        null,
                        null};
                if ((parentTrackRowByTrack_Release != null)) {
                    columnValuesArray[13] = parentTrackRowByTrack_Release[16];
                }
                rowReleaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReleaseRow);
                return rowReleaseRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                ReleaseDataTable cln = ((ReleaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new ReleaseDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCDDBID = base.Columns["CDDBID"];
                this.columnCircleP = base.Columns["CircleP"];
                this.columnCreated = base.Columns["Created"];
                this.columnDisplayTitle = base.Columns["DisplayTitle"];
                this.columnGuid = base.Columns["Guid"];
                this.columnId = base.Columns["Id"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsCompilation = base.Columns["IsCompilation"];
                this.columnNumberOfTracks = base.Columns["NumberOfTracks"];
                this.columnRequested = base.Columns["Requested"];
                this.columnTitle = base.Columns["Title"];
                this.columnUpdated = base.Columns["Updated"];
                this.columnRelease_Id = base.Columns["Release_Id"];
                this.columnTrack_Id = base.Columns["Track_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCDDBID = new DataColumn("CDDBID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCDDBID);
                this.columnCircleP = new DataColumn("CircleP", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCircleP);
                this.columnCreated = new DataColumn("Created", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnDisplayTitle = new DataColumn("DisplayTitle", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDisplayTitle);
                this.columnGuid = new DataColumn("Guid", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnGuid);
                this.columnId = new DataColumn("Id", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIsActive = new DataColumn("IsActive", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsCompilation = new DataColumn("IsCompilation", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIsCompilation);
                this.columnNumberOfTracks = new DataColumn("NumberOfTracks", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNumberOfTracks);
                this.columnRequested = new DataColumn("Requested", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRequested);
                this.columnTitle = new DataColumn("Title", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnUpdated = new DataColumn("Updated", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUpdated);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.columnTrack_Id = new DataColumn("Track_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnTrack_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRelease_Id}, true));
                this.columnRelease_Id.AutoIncrement = true;
                this.columnRelease_Id.AllowDBNull = false;
                this.columnRelease_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow NewReleaseRow() {
                return ((ReleaseRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReleaseRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(ReleaseRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReleaseRowChanged != null)) {
                    this.ReleaseRowChanged(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReleaseRowChanging != null)) {
                    this.ReleaseRowChanging(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReleaseRowDeleted != null)) {
                    this.ReleaseRowDeleted(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReleaseRowDeleting != null)) {
                    this.ReleaseRowDeleting(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReleaseRow(ReleaseRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReleaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class LabelsDataTable : TypedTableBase<LabelsRow> {
            
            private DataColumn columnLabels_Id;
            
            private DataColumn columnRelease_Id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsDataTable() {
                this.TableName = "Labels";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LabelsDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LabelsDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Labels_IdColumn {
                get {
                    return this.columnLabels_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Release_IdColumn {
                get {
                    return this.columnRelease_Id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow this[int index] {
                get {
                    return ((LabelsRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LabelsRowChangeEventHandler LabelsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LabelsRowChangeEventHandler LabelsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LabelsRowChangeEventHandler LabelsRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LabelsRowChangeEventHandler LabelsRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLabelsRow(LabelsRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow AddLabelsRow(ReleaseRow parentReleaseRowByRelease_Labels) {
                LabelsRow rowLabelsRow = ((LabelsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentReleaseRowByRelease_Labels != null)) {
                    columnValuesArray[1] = parentReleaseRowByRelease_Labels[12];
                }
                rowLabelsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabelsRow);
                return rowLabelsRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                LabelsDataTable cln = ((LabelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new LabelsDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnLabels_Id = base.Columns["Labels_Id"];
                this.columnRelease_Id = base.Columns["Release_Id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnLabels_Id = new DataColumn("Labels_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnLabels_Id);
                this.columnRelease_Id = new DataColumn("Release_Id", typeof(int), null, MappingType.Hidden);
                base.Columns.Add(this.columnRelease_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnLabels_Id}, true));
                this.columnLabels_Id.AutoIncrement = true;
                this.columnLabels_Id.AllowDBNull = false;
                this.columnLabels_Id.Unique = true;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow NewLabelsRow() {
                return ((LabelsRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LabelsRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(LabelsRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelsRowChanged != null)) {
                    this.LabelsRowChanged(this, new LabelsRowChangeEvent(((LabelsRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelsRowChanging != null)) {
                    this.LabelsRowChanging(this, new LabelsRowChangeEvent(((LabelsRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelsRowDeleted != null)) {
                    this.LabelsRowDeleted(this, new LabelsRowChangeEvent(((LabelsRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelsRowDeleting != null)) {
                    this.LabelsRowDeleting(this, new LabelsRowChangeEvent(((LabelsRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLabelsRow(LabelsRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CreatedByRow : DataRow {
            
            private CreatedByDataTable tableCreatedBy;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreatedByRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreatedBy = ((CreatedByDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableCreatedBy.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCreatedBy.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableCreatedBy.emailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'email\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.emailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PrimaryArtist_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.PrimaryArtist_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'PrimaryArtist_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.PrimaryArtist_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Publisher_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.Publisher_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Publisher_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.Publisher_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MusicalWork_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.MusicalWork_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'MusicalWork_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.MusicalWork_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PhysicalDisc_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.PhysicalDisc_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'PhysicalDisc_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.PhysicalDisc_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.Release_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Release_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableCreatedBy.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'CreatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreatedBy.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow PrimaryArtistRow {
                get {
                    return ((PrimaryArtistRow)(this.GetParentRow(this.Table.ParentRelations["PrimaryArtist_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PrimaryArtist_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow PublisherRow {
                get {
                    return ((PublisherRow)(this.GetParentRow(this.Table.ParentRelations["Publisher_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Publisher_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow MusicalWorkRow {
                get {
                    return ((MusicalWorkRow)(this.GetParentRow(this.Table.ParentRelations["MusicalWork_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MusicalWork_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow PhysicalDiscRow {
                get {
                    return ((PhysicalDiscRow)(this.GetParentRow(this.Table.ParentRelations["PhysicalDisc_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PhysicalDisc_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow ReleaseRow {
                get {
                    return ((ReleaseRow)(this.GetParentRow(this.Table.ParentRelations["Release_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Release_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_CreatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_CreatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableCreatedBy.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableCreatedBy.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableCreatedBy.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableCreatedBy.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsemailNull() {
                return this.IsNull(this.tableCreatedBy.emailColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetemailNull() {
                this[this.tableCreatedBy.emailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPrimaryArtist_IdNull() {
                return this.IsNull(this.tableCreatedBy.PrimaryArtist_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPrimaryArtist_IdNull() {
                this[this.tableCreatedBy.PrimaryArtist_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPublisher_IdNull() {
                return this.IsNull(this.tableCreatedBy.Publisher_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPublisher_IdNull() {
                this[this.tableCreatedBy.Publisher_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMusicalWork_IdNull() {
                return this.IsNull(this.tableCreatedBy.MusicalWork_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMusicalWork_IdNull() {
                this[this.tableCreatedBy.MusicalWork_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPhysicalDisc_IdNull() {
                return this.IsNull(this.tableCreatedBy.PhysicalDisc_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPhysicalDisc_IdNull() {
                this[this.tableCreatedBy.PhysicalDisc_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRelease_IdNull() {
                return this.IsNull(this.tableCreatedBy.Release_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRelease_IdNull() {
                this[this.tableCreatedBy.Release_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableCreatedBy.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableCreatedBy.Track_IdColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class elementRow : DataRow {
            
            private elementDataTable tableelement;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal elementRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableelement = ((elementDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableelement.LocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Location\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.LocationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Platform {
                get {
                    try {
                        return ((string)(this[this.tableelement.PlatformColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Platform\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.PlatformColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableelement.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableelement.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasMasterRight {
                get {
                    try {
                        return ((string)(this[this.tableelement.HasMasterRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasMasterRight\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.HasMasterRightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasVideoRight {
                get {
                    try {
                        return ((string)(this[this.tableelement.HasVideoRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasVideoRight\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.HasVideoRightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LicensingEntity {
                get {
                    try {
                        return ((string)(this[this.tableelement.LicensingEntityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'LicensingEntity\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.LicensingEntityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Territory {
                get {
                    try {
                        return ((string)(this[this.tableelement.TerritoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Territory\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.TerritoryColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int element_Id {
                get {
                    return ((int)(this[this.tableelement.element_IdColumn]));
                }
                set {
                    this[this.tableelement.element_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int EncodedAudioFiles_Id {
                get {
                    try {
                        return ((int)(this[this.tableelement.EncodedAudioFiles_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'EncodedAudioFiles_Id\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.EncodedAudioFiles_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Genres_Id {
                get {
                    try {
                        return ((int)(this[this.tableelement.Genres_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Genres_Id\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.Genres_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Writers_Id {
                get {
                    try {
                        return ((int)(this[this.tableelement.Writers_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Writers_Id\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.Writers_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Labels_Id {
                get {
                    try {
                        return ((int)(this[this.tableelement.Labels_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Labels_Id\' in table \'element\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelement.Labels_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow EncodedAudioFilesRow {
                get {
                    return ((EncodedAudioFilesRow)(this.GetParentRow(this.Table.ParentRelations["EncodedAudioFiles_element"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EncodedAudioFiles_element"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow GenresRow {
                get {
                    return ((GenresRow)(this.GetParentRow(this.Table.ParentRelations["Genres_element"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Genres_element"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow WritersRow {
                get {
                    return ((WritersRow)(this.GetParentRow(this.Table.ParentRelations["Writers_element"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Writers_element"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow LabelsRow {
                get {
                    return ((LabelsRow)(this.GetParentRow(this.Table.ParentRelations["Labels_element"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Labels_element"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocationNull() {
                return this.IsNull(this.tableelement.LocationColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocationNull() {
                this[this.tableelement.LocationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPlatformNull() {
                return this.IsNull(this.tableelement.PlatformColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPlatformNull() {
                this[this.tableelement.PlatformColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableelement.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableelement.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableelement.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableelement.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasMasterRightNull() {
                return this.IsNull(this.tableelement.HasMasterRightColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasMasterRightNull() {
                this[this.tableelement.HasMasterRightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasVideoRightNull() {
                return this.IsNull(this.tableelement.HasVideoRightColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasVideoRightNull() {
                this[this.tableelement.HasVideoRightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLicensingEntityNull() {
                return this.IsNull(this.tableelement.LicensingEntityColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLicensingEntityNull() {
                this[this.tableelement.LicensingEntityColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTerritoryNull() {
                return this.IsNull(this.tableelement.TerritoryColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTerritoryNull() {
                this[this.tableelement.TerritoryColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEncodedAudioFiles_IdNull() {
                return this.IsNull(this.tableelement.EncodedAudioFiles_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEncodedAudioFiles_IdNull() {
                this[this.tableelement.EncodedAudioFiles_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGenres_IdNull() {
                return this.IsNull(this.tableelement.Genres_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGenres_IdNull() {
                this[this.tableelement.Genres_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWriters_IdNull() {
                return this.IsNull(this.tableelement.Writers_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWriters_IdNull() {
                this[this.tableelement.Writers_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabels_IdNull() {
                return this.IsNull(this.tableelement.Labels_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabels_IdNull() {
                this[this.tableelement.Labels_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRow[] GetParentGenreRows() {
                if ((this.Table.ChildRelations["element_ParentGenre"] == null)) {
                    return new ParentGenreRow[0];
                }
                else {
                    return ((ParentGenreRow[])(base.GetChildRows(this.Table.ChildRelations["element_ParentGenre"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ParentGenreRow : DataRow {
            
            private ParentGenreDataTable tableParentGenre;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParentGenreRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableParentGenre = ((ParentGenreDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableParentGenre.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'ParentGenre\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentGenre.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableParentGenre.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'ParentGenre\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentGenre.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string _null {
                get {
                    try {
                        return ((string)(this[this.tableParentGenre._nullColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'null\' in table \'ParentGenre\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentGenre._nullColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int element_Id {
                get {
                    try {
                        return ((int)(this[this.tableParentGenre.element_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'element_Id\' in table \'ParentGenre\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentGenre.element_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow elementRow {
                get {
                    return ((elementRow)(this.GetParentRow(this.Table.ParentRelations["element_ParentGenre"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["element_ParentGenre"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableParentGenre.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableParentGenre.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableParentGenre.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableParentGenre.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_nullNull() {
                return this.IsNull(this.tableParentGenre._nullColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_nullNull() {
                this[this.tableParentGenre._nullColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Iselement_IdNull() {
                return this.IsNull(this.tableParentGenre.element_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setelement_IdNull() {
                this[this.tableParentGenre.element_IdColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UpdatedByRow : DataRow {
            
            private UpdatedByDataTable tableUpdatedBy;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal UpdatedByRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUpdatedBy = ((UpdatedByDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableUpdatedBy.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUpdatedBy.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableUpdatedBy.emailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'email\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.emailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PrimaryArtist_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.PrimaryArtist_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'PrimaryArtist_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.PrimaryArtist_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Publisher_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.Publisher_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Publisher_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.Publisher_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MusicalWork_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.MusicalWork_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'MusicalWork_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.MusicalWork_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PhysicalDisc_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.PhysicalDisc_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'PhysicalDisc_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.PhysicalDisc_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.Release_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Release_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableUpdatedBy.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'UpdatedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdatedBy.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow PrimaryArtistRow {
                get {
                    return ((PrimaryArtistRow)(this.GetParentRow(this.Table.ParentRelations["PrimaryArtist_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PrimaryArtist_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow PublisherRow {
                get {
                    return ((PublisherRow)(this.GetParentRow(this.Table.ParentRelations["Publisher_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Publisher_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow MusicalWorkRow {
                get {
                    return ((MusicalWorkRow)(this.GetParentRow(this.Table.ParentRelations["MusicalWork_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MusicalWork_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow PhysicalDiscRow {
                get {
                    return ((PhysicalDiscRow)(this.GetParentRow(this.Table.ParentRelations["PhysicalDisc_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PhysicalDisc_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow ReleaseRow {
                get {
                    return ((ReleaseRow)(this.GetParentRow(this.Table.ParentRelations["Release_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Release_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_UpdatedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_UpdatedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableUpdatedBy.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableUpdatedBy.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableUpdatedBy.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableUpdatedBy.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsemailNull() {
                return this.IsNull(this.tableUpdatedBy.emailColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetemailNull() {
                this[this.tableUpdatedBy.emailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPrimaryArtist_IdNull() {
                return this.IsNull(this.tableUpdatedBy.PrimaryArtist_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPrimaryArtist_IdNull() {
                this[this.tableUpdatedBy.PrimaryArtist_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPublisher_IdNull() {
                return this.IsNull(this.tableUpdatedBy.Publisher_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPublisher_IdNull() {
                this[this.tableUpdatedBy.Publisher_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMusicalWork_IdNull() {
                return this.IsNull(this.tableUpdatedBy.MusicalWork_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMusicalWork_IdNull() {
                this[this.tableUpdatedBy.MusicalWork_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPhysicalDisc_IdNull() {
                return this.IsNull(this.tableUpdatedBy.PhysicalDisc_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPhysicalDisc_IdNull() {
                this[this.tableUpdatedBy.PhysicalDisc_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRelease_IdNull() {
                return this.IsNull(this.tableUpdatedBy.Release_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRelease_IdNull() {
                this[this.tableUpdatedBy.Release_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableUpdatedBy.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableUpdatedBy.Track_IdColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PrimaryArtistRow : DataRow {
            
            private PrimaryArtistDataTable tablePrimaryArtist;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PrimaryArtistRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrimaryArtist = ((PrimaryArtistDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Country\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.CountryColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Description\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.DescriptionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.DisplayNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'DisplayName\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.DisplayNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Guid {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.GuidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Guid\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.GuidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsActive {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsActive\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.IsActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsGroup {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.IsGroupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsGroup\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.IsGroupColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tablePrimaryArtist.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PrimaryArtist_Id {
                get {
                    return ((int)(this[this.tablePrimaryArtist.PrimaryArtist_IdColumn]));
                }
                set {
                    this[this.tablePrimaryArtist.PrimaryArtist_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrimaryArtist.Release_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Release_Id\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrimaryArtist.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'PrimaryArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrimaryArtist.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow ReleaseRow {
                get {
                    return ((ReleaseRow)(this.GetParentRow(this.Table.ParentRelations["Release_PrimaryArtist"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Release_PrimaryArtist"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_PrimaryArtist"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_PrimaryArtist"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCountryNull() {
                return this.IsNull(this.tablePrimaryArtist.CountryColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCountryNull() {
                this[this.tablePrimaryArtist.CountryColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tablePrimaryArtist.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tablePrimaryArtist.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePrimaryArtist.DescriptionColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tablePrimaryArtist.DescriptionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tablePrimaryArtist.DisplayNameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDisplayNameNull() {
                this[this.tablePrimaryArtist.DisplayNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGuidNull() {
                return this.IsNull(this.tablePrimaryArtist.GuidColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGuidNull() {
                this[this.tablePrimaryArtist.GuidColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tablePrimaryArtist.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tablePrimaryArtist.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablePrimaryArtist.IsActiveColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsActiveNull() {
                this[this.tablePrimaryArtist.IsActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsGroupNull() {
                return this.IsNull(this.tablePrimaryArtist.IsGroupColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsGroupNull() {
                this[this.tablePrimaryArtist.IsGroupColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tablePrimaryArtist.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tablePrimaryArtist.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tablePrimaryArtist.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tablePrimaryArtist.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRelease_IdNull() {
                return this.IsNull(this.tablePrimaryArtist.Release_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRelease_IdNull() {
                this[this.tablePrimaryArtist.Release_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tablePrimaryArtist.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tablePrimaryArtist.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["PrimaryArtist_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["PrimaryArtist_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["PrimaryArtist_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["PrimaryArtist_UpdatedBy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RequestedByRow : DataRow {
            
            private RequestedByDataTable tableRequestedBy;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RequestedByRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRequestedBy = ((RequestedByDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableRequestedBy.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'RequestedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestedBy.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableRequestedBy.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Name\' in table \'RequestedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestedBy.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableRequestedBy.emailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'email\' in table \'RequestedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestedBy.emailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    try {
                        return ((int)(this[this.tableRequestedBy.Release_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Release_Id\' in table \'RequestedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestedBy.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableRequestedBy.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'RequestedBy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestedBy.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow ReleaseRow {
                get {
                    return ((ReleaseRow)(this.GetParentRow(this.Table.ParentRelations["Release_RequestedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Release_RequestedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_RequestedBy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_RequestedBy"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableRequestedBy.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableRequestedBy.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableRequestedBy.NameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableRequestedBy.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsemailNull() {
                return this.IsNull(this.tableRequestedBy.emailColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetemailNull() {
                this[this.tableRequestedBy.emailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRelease_IdNull() {
                return this.IsNull(this.tableRequestedBy.Release_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRelease_IdNull() {
                this[this.tableRequestedBy.Release_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableRequestedBy.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableRequestedBy.Track_IdColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TrackRow : DataRow {
            
            private TrackDataTable tableTrack;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TrackRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrack = ((TrackDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BeatsPerMinute {
                get {
                    try {
                        return ((string)(this[this.tableTrack.BeatsPerMinuteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'BeatsPerMinute\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.BeatsPerMinuteColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tableTrack.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayTitle {
                get {
                    try {
                        return ((string)(this[this.tableTrack.DisplayTitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'DisplayTitle\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.DisplayTitleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Duration {
                get {
                    try {
                        return ((string)(this[this.tableTrack.DurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Duration\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.DurationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Guid {
                get {
                    try {
                        return ((string)(this[this.tableTrack.GuidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Guid\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.GuidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ISRC {
                get {
                    try {
                        return ((string)(this[this.tableTrack.ISRCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'ISRC\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.ISRCColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableTrack.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsActive {
                get {
                    try {
                        return ((string)(this[this.tableTrack.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsActive\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.IsActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsInstrumental {
                get {
                    try {
                        return ((string)(this[this.tableTrack.IsInstrumentalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsInstrumental\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.IsInstrumentalColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Labels {
                get {
                    try {
                        return ((string)(this[this.tableTrack.LabelsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Labels\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.LabelsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Requested {
                get {
                    try {
                        return ((string)(this[this.tableTrack.RequestedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Requested\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.RequestedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableTrack.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Title\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.TitleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TrackNumber {
                get {
                    try {
                        return ((string)(this[this.tableTrack.TrackNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'TrackNumber\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.TrackNumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tableTrack.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VocalGender {
                get {
                    try {
                        return ((string)(this[this.tableTrack.VocalGenderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'VocalGender\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.VocalGenderColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableTrack.YearColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Year\' in table \'Track\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrack.YearColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    return ((int)(this[this.tableTrack.Track_IdColumn]));
                }
                set {
                    this[this.tableTrack.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBeatsPerMinuteNull() {
                return this.IsNull(this.tableTrack.BeatsPerMinuteColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBeatsPerMinuteNull() {
                this[this.tableTrack.BeatsPerMinuteColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableTrack.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tableTrack.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDisplayTitleNull() {
                return this.IsNull(this.tableTrack.DisplayTitleColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDisplayTitleNull() {
                this[this.tableTrack.DisplayTitleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDurationNull() {
                return this.IsNull(this.tableTrack.DurationColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDurationNull() {
                this[this.tableTrack.DurationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGuidNull() {
                return this.IsNull(this.tableTrack.GuidColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGuidNull() {
                this[this.tableTrack.GuidColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISRCNull() {
                return this.IsNull(this.tableTrack.ISRCColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISRCNull() {
                this[this.tableTrack.ISRCColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableTrack.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableTrack.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableTrack.IsActiveColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsActiveNull() {
                this[this.tableTrack.IsActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsInstrumentalNull() {
                return this.IsNull(this.tableTrack.IsInstrumentalColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsInstrumentalNull() {
                this[this.tableTrack.IsInstrumentalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLabelsNull() {
                return this.IsNull(this.tableTrack.LabelsColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLabelsNull() {
                this[this.tableTrack.LabelsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequestedNull() {
                return this.IsNull(this.tableTrack.RequestedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRequestedNull() {
                this[this.tableTrack.RequestedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTitleNull() {
                return this.IsNull(this.tableTrack.TitleColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTitleNull() {
                this[this.tableTrack.TitleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrackNumberNull() {
                return this.IsNull(this.tableTrack.TrackNumberColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrackNumberNull() {
                this[this.tableTrack.TrackNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tableTrack.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tableTrack.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVocalGenderNull() {
                return this.IsNull(this.tableTrack.VocalGenderColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVocalGenderNull() {
                this[this.tableTrack.VocalGenderColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsYearNull() {
                return this.IsNull(this.tableTrack.YearColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetYearNull() {
                this[this.tableTrack.YearColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["Track_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Track_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow[] GetEncodedAudioFilesRows() {
                if ((this.Table.ChildRelations["Track_EncodedAudioFiles"] == null)) {
                    return new EncodedAudioFilesRow[0];
                }
                else {
                    return ((EncodedAudioFilesRow[])(base.GetChildRows(this.Table.ChildRelations["Track_EncodedAudioFiles"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow[] GetGenresRows() {
                if ((this.Table.ChildRelations["Track_Genres"] == null)) {
                    return new GenresRow[0];
                }
                else {
                    return ((GenresRow[])(base.GetChildRows(this.Table.ChildRelations["Track_Genres"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow[] GetMusicalWorkRows() {
                if ((this.Table.ChildRelations["Track_MusicalWork"] == null)) {
                    return new MusicalWorkRow[0];
                }
                else {
                    return ((MusicalWorkRow[])(base.GetChildRows(this.Table.ChildRelations["Track_MusicalWork"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow[] GetPhysicalDiscRows() {
                if ((this.Table.ChildRelations["Track_PhysicalDisc"] == null)) {
                    return new PhysicalDiscRow[0];
                }
                else {
                    return ((PhysicalDiscRow[])(base.GetChildRows(this.Table.ChildRelations["Track_PhysicalDisc"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow[] GetPrimaryArtistRows() {
                if ((this.Table.ChildRelations["Track_PrimaryArtist"] == null)) {
                    return new PrimaryArtistRow[0];
                }
                else {
                    return ((PrimaryArtistRow[])(base.GetChildRows(this.Table.ChildRelations["Track_PrimaryArtist"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow[] GetReleaseRows() {
                if ((this.Table.ChildRelations["Track_Release"] == null)) {
                    return new ReleaseRow[0];
                }
                else {
                    return ((ReleaseRow[])(base.GetChildRows(this.Table.ChildRelations["Track_Release"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow[] GetRequestedByRows() {
                if ((this.Table.ChildRelations["Track_RequestedBy"] == null)) {
                    return new RequestedByRow[0];
                }
                else {
                    return ((RequestedByRow[])(base.GetChildRows(this.Table.ChildRelations["Track_RequestedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["Track_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Track_UpdatedBy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EncodedAudioFilesRow : DataRow {
            
            private EncodedAudioFilesDataTable tableEncodedAudioFiles;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EncodedAudioFilesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEncodedAudioFiles = ((EncodedAudioFilesDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int EncodedAudioFiles_Id {
                get {
                    return ((int)(this[this.tableEncodedAudioFiles.EncodedAudioFiles_IdColumn]));
                }
                set {
                    this[this.tableEncodedAudioFiles.EncodedAudioFiles_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableEncodedAudioFiles.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'EncodedAudioFiles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEncodedAudioFiles.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_EncodedAudioFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_EncodedAudioFiles"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableEncodedAudioFiles.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableEncodedAudioFiles.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow[] GetelementRows() {
                if ((this.Table.ChildRelations["EncodedAudioFiles_element"] == null)) {
                    return new elementRow[0];
                }
                else {
                    return ((elementRow[])(base.GetChildRows(this.Table.ChildRelations["EncodedAudioFiles_element"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GenresRow : DataRow {
            
            private GenresDataTable tableGenres;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GenresRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenres = ((GenresDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Genres_Id {
                get {
                    return ((int)(this[this.tableGenres.Genres_IdColumn]));
                }
                set {
                    this[this.tableGenres.Genres_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableGenres.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'Genres\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenres.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_Genres"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_Genres"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableGenres.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableGenres.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow[] GetelementRows() {
                if ((this.Table.ChildRelations["Genres_element"] == null)) {
                    return new elementRow[0];
                }
                else {
                    return ((elementRow[])(base.GetChildRows(this.Table.ChildRelations["Genres_element"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MusicalWorkRow : DataRow {
            
            private MusicalWorkDataTable tableMusicalWork;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MusicalWorkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMusicalWork = ((MusicalWorkDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CircleC {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.CircleCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'CircleC\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.CircleCColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HFACode {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.HFACodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HFACode\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.HFACodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Title\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.TitleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tableMusicalWork.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MusicalWork_Id {
                get {
                    return ((int)(this[this.tableMusicalWork.MusicalWork_IdColumn]));
                }
                set {
                    this[this.tableMusicalWork.MusicalWork_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableMusicalWork.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'MusicalWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMusicalWork.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_MusicalWork"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_MusicalWork"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCircleCNull() {
                return this.IsNull(this.tableMusicalWork.CircleCColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCircleCNull() {
                this[this.tableMusicalWork.CircleCColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableMusicalWork.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tableMusicalWork.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHFACodeNull() {
                return this.IsNull(this.tableMusicalWork.HFACodeColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHFACodeNull() {
                this[this.tableMusicalWork.HFACodeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableMusicalWork.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableMusicalWork.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTitleNull() {
                return this.IsNull(this.tableMusicalWork.TitleColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTitleNull() {
                this[this.tableMusicalWork.TitleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tableMusicalWork.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tableMusicalWork.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableMusicalWork.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableMusicalWork.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["MusicalWork_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["MusicalWork_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow[] GetPublishersRows() {
                if ((this.Table.ChildRelations["MusicalWork_Publishers"] == null)) {
                    return new PublishersRow[0];
                }
                else {
                    return ((PublishersRow[])(base.GetChildRows(this.Table.ChildRelations["MusicalWork_Publishers"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["MusicalWork_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["MusicalWork_UpdatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow[] GetWritersRows() {
                if ((this.Table.ChildRelations["MusicalWork_Writers"] == null)) {
                    return new WritersRow[0];
                }
                else {
                    return ((WritersRow[])(base.GetChildRows(this.Table.ChildRelations["MusicalWork_Writers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PublishersRow : DataRow {
            
            private PublishersDataTable tablePublishers;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PublishersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePublishers = ((PublishersDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Publishers_Id {
                get {
                    return ((int)(this[this.tablePublishers.Publishers_IdColumn]));
                }
                set {
                    this[this.tablePublishers.Publishers_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MusicalWork_Id {
                get {
                    try {
                        return ((int)(this[this.tablePublishers.MusicalWork_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'MusicalWork_Id\' in table \'Publishers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublishers.MusicalWork_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow MusicalWorkRow {
                get {
                    return ((MusicalWorkRow)(this.GetParentRow(this.Table.ParentRelations["MusicalWork_Publishers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MusicalWork_Publishers"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMusicalWork_IdNull() {
                return this.IsNull(this.tablePublishers.MusicalWork_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMusicalWork_IdNull() {
                this[this.tablePublishers.MusicalWork_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow[] GetPublisherRows() {
                if ((this.Table.ChildRelations["Publishers_Publisher"] == null)) {
                    return new PublisherRow[0];
                }
                else {
                    return ((PublisherRow[])(base.GetChildRows(this.Table.ChildRelations["Publishers_Publisher"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PublisherRow : DataRow {
            
            private PublisherDataTable tablePublisher;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PublisherRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePublisher = ((PublisherDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasInternationalClearance {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.HasInternationalClearanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasInternationalClearance\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.HasInternationalClearanceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasMechanicalRight {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.HasMechanicalRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasMechanicalRight\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.HasMechanicalRightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasPerformanceRight {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.HasPerformanceRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasPerformanceRight\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.HasPerformanceRightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HasVideoRight {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.HasVideoRightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'HasVideoRight\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.HasVideoRightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Split {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.SplitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Split\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.SplitColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Territory {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.TerritoryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Territory\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.TerritoryColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablePublisher.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'name\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.nameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Publisher_Id {
                get {
                    return ((int)(this[this.tablePublisher.Publisher_IdColumn]));
                }
                set {
                    this[this.tablePublisher.Publisher_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Publishers_Id {
                get {
                    try {
                        return ((int)(this[this.tablePublisher.Publishers_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Publishers_Id\' in table \'Publisher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePublisher.Publishers_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow PublishersRow {
                get {
                    return ((PublishersRow)(this.GetParentRow(this.Table.ParentRelations["Publishers_Publisher"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Publishers_Publisher"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tablePublisher.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tablePublisher.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasInternationalClearanceNull() {
                return this.IsNull(this.tablePublisher.HasInternationalClearanceColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasInternationalClearanceNull() {
                this[this.tablePublisher.HasInternationalClearanceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasMechanicalRightNull() {
                return this.IsNull(this.tablePublisher.HasMechanicalRightColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasMechanicalRightNull() {
                this[this.tablePublisher.HasMechanicalRightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasPerformanceRightNull() {
                return this.IsNull(this.tablePublisher.HasPerformanceRightColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasPerformanceRightNull() {
                this[this.tablePublisher.HasPerformanceRightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHasVideoRightNull() {
                return this.IsNull(this.tablePublisher.HasVideoRightColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHasVideoRightNull() {
                this[this.tablePublisher.HasVideoRightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tablePublisher.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tablePublisher.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSplitNull() {
                return this.IsNull(this.tablePublisher.SplitColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSplitNull() {
                this[this.tablePublisher.SplitColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTerritoryNull() {
                return this.IsNull(this.tablePublisher.TerritoryColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTerritoryNull() {
                this[this.tablePublisher.TerritoryColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tablePublisher.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tablePublisher.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsnameNull() {
                return this.IsNull(this.tablePublisher.nameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetnameNull() {
                this[this.tablePublisher.nameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPublishers_IdNull() {
                return this.IsNull(this.tablePublisher.Publishers_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPublishers_IdNull() {
                this[this.tablePublisher.Publishers_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["Publisher_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Publisher_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["Publisher_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Publisher_UpdatedBy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class WritersRow : DataRow {
            
            private WritersDataTable tableWriters;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal WritersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWriters = ((WritersDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Writers_Id {
                get {
                    return ((int)(this[this.tableWriters.Writers_IdColumn]));
                }
                set {
                    this[this.tableWriters.Writers_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MusicalWork_Id {
                get {
                    try {
                        return ((int)(this[this.tableWriters.MusicalWork_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'MusicalWork_Id\' in table \'Writers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriters.MusicalWork_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow MusicalWorkRow {
                get {
                    return ((MusicalWorkRow)(this.GetParentRow(this.Table.ParentRelations["MusicalWork_Writers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MusicalWork_Writers"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMusicalWork_IdNull() {
                return this.IsNull(this.tableWriters.MusicalWork_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMusicalWork_IdNull() {
                this[this.tableWriters.MusicalWork_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow[] GetelementRows() {
                if ((this.Table.ChildRelations["Writers_element"] == null)) {
                    return new elementRow[0];
                }
                else {
                    return ((elementRow[])(base.GetChildRows(this.Table.ChildRelations["Writers_element"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PhysicalDiscRow : DataRow {
            
            private PhysicalDiscDataTable tablePhysicalDisc;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PhysicalDiscRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePhysicalDisc = ((PhysicalDiscDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CatelogNumber {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.CatelogNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'CatelogNumber\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.CatelogNumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DiscNumber {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.DiscNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'DiscNumber\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.DiscNumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.LocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Location\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.LocationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tablePhysicalDisc.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PhysicalDisc_Id {
                get {
                    return ((int)(this[this.tablePhysicalDisc.PhysicalDisc_IdColumn]));
                }
                set {
                    this[this.tablePhysicalDisc.PhysicalDisc_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tablePhysicalDisc.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'PhysicalDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhysicalDisc.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_PhysicalDisc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_PhysicalDisc"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCatelogNumberNull() {
                return this.IsNull(this.tablePhysicalDisc.CatelogNumberColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCatelogNumberNull() {
                this[this.tablePhysicalDisc.CatelogNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tablePhysicalDisc.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tablePhysicalDisc.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDiscNumberNull() {
                return this.IsNull(this.tablePhysicalDisc.DiscNumberColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiscNumberNull() {
                this[this.tablePhysicalDisc.DiscNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tablePhysicalDisc.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tablePhysicalDisc.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocationNull() {
                return this.IsNull(this.tablePhysicalDisc.LocationColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocationNull() {
                this[this.tablePhysicalDisc.LocationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tablePhysicalDisc.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tablePhysicalDisc.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tablePhysicalDisc.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tablePhysicalDisc.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["PhysicalDisc_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["PhysicalDisc_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["PhysicalDisc_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["PhysicalDisc_UpdatedBy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ReleaseRow : DataRow {
            
            private ReleaseDataTable tableRelease;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReleaseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRelease = ((ReleaseDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CDDBID {
                get {
                    try {
                        return ((string)(this[this.tableRelease.CDDBIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'CDDBID\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.CDDBIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CircleP {
                get {
                    try {
                        return ((string)(this[this.tableRelease.CirclePColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'CircleP\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.CirclePColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Created {
                get {
                    try {
                        return ((string)(this[this.tableRelease.CreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Created\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.CreatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayTitle {
                get {
                    try {
                        return ((string)(this[this.tableRelease.DisplayTitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'DisplayTitle\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.DisplayTitleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Guid {
                get {
                    try {
                        return ((string)(this[this.tableRelease.GuidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Guid\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.GuidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableRelease.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Id\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsActive {
                get {
                    try {
                        return ((string)(this[this.tableRelease.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsActive\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.IsActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IsCompilation {
                get {
                    try {
                        return ((string)(this[this.tableRelease.IsCompilationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'IsCompilation\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.IsCompilationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NumberOfTracks {
                get {
                    try {
                        return ((string)(this[this.tableRelease.NumberOfTracksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'NumberOfTracks\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.NumberOfTracksColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Requested {
                get {
                    try {
                        return ((string)(this[this.tableRelease.RequestedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Requested\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.RequestedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableRelease.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Title\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.TitleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Updated {
                get {
                    try {
                        return ((string)(this[this.tableRelease.UpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Updated\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.UpdatedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    return ((int)(this[this.tableRelease.Release_IdColumn]));
                }
                set {
                    this[this.tableRelease.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Track_Id {
                get {
                    try {
                        return ((int)(this[this.tableRelease.Track_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Track_Id\' in table \'Release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelease.Track_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow TrackRow {
                get {
                    return ((TrackRow)(this.GetParentRow(this.Table.ParentRelations["Track_Release"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Track_Release"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCDDBIDNull() {
                return this.IsNull(this.tableRelease.CDDBIDColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCDDBIDNull() {
                this[this.tableRelease.CDDBIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCirclePNull() {
                return this.IsNull(this.tableRelease.CirclePColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCirclePNull() {
                this[this.tableRelease.CirclePColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableRelease.CreatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedNull() {
                this[this.tableRelease.CreatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDisplayTitleNull() {
                return this.IsNull(this.tableRelease.DisplayTitleColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDisplayTitleNull() {
                this[this.tableRelease.DisplayTitleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGuidNull() {
                return this.IsNull(this.tableRelease.GuidColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGuidNull() {
                this[this.tableRelease.GuidColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIdNull() {
                return this.IsNull(this.tableRelease.IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIdNull() {
                this[this.tableRelease.IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableRelease.IsActiveColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsActiveNull() {
                this[this.tableRelease.IsActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsCompilationNull() {
                return this.IsNull(this.tableRelease.IsCompilationColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsCompilationNull() {
                this[this.tableRelease.IsCompilationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNumberOfTracksNull() {
                return this.IsNull(this.tableRelease.NumberOfTracksColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNumberOfTracksNull() {
                this[this.tableRelease.NumberOfTracksColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequestedNull() {
                return this.IsNull(this.tableRelease.RequestedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRequestedNull() {
                this[this.tableRelease.RequestedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTitleNull() {
                return this.IsNull(this.tableRelease.TitleColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTitleNull() {
                this[this.tableRelease.TitleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUpdatedNull() {
                return this.IsNull(this.tableRelease.UpdatedColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUpdatedNull() {
                this[this.tableRelease.UpdatedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTrack_IdNull() {
                return this.IsNull(this.tableRelease.Track_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrack_IdNull() {
                this[this.tableRelease.Track_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow[] GetCreatedByRows() {
                if ((this.Table.ChildRelations["Release_CreatedBy"] == null)) {
                    return new CreatedByRow[0];
                }
                else {
                    return ((CreatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Release_CreatedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow[] GetLabelsRows() {
                if ((this.Table.ChildRelations["Release_Labels"] == null)) {
                    return new LabelsRow[0];
                }
                else {
                    return ((LabelsRow[])(base.GetChildRows(this.Table.ChildRelations["Release_Labels"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow[] GetPrimaryArtistRows() {
                if ((this.Table.ChildRelations["Release_PrimaryArtist"] == null)) {
                    return new PrimaryArtistRow[0];
                }
                else {
                    return ((PrimaryArtistRow[])(base.GetChildRows(this.Table.ChildRelations["Release_PrimaryArtist"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow[] GetRequestedByRows() {
                if ((this.Table.ChildRelations["Release_RequestedBy"] == null)) {
                    return new RequestedByRow[0];
                }
                else {
                    return ((RequestedByRow[])(base.GetChildRows(this.Table.ChildRelations["Release_RequestedBy"])));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow[] GetUpdatedByRows() {
                if ((this.Table.ChildRelations["Release_UpdatedBy"] == null)) {
                    return new UpdatedByRow[0];
                }
                else {
                    return ((UpdatedByRow[])(base.GetChildRows(this.Table.ChildRelations["Release_UpdatedBy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LabelsRow : DataRow {
            
            private LabelsDataTable tableLabels;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LabelsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabels = ((LabelsDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Labels_Id {
                get {
                    return ((int)(this[this.tableLabels.Labels_IdColumn]));
                }
                set {
                    this[this.tableLabels.Labels_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Release_Id {
                get {
                    try {
                        return ((int)(this[this.tableLabels.Release_IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'Release_Id\' in table \'Labels\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabels.Release_IdColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow ReleaseRow {
                get {
                    return ((ReleaseRow)(this.GetParentRow(this.Table.ParentRelations["Release_Labels"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Release_Labels"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRelease_IdNull() {
                return this.IsNull(this.tableLabels.Release_IdColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRelease_IdNull() {
                this[this.tableLabels.Release_IdColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow[] GetelementRows() {
                if ((this.Table.ChildRelations["Labels_element"] == null)) {
                    return new elementRow[0];
                }
                else {
                    return ((elementRow[])(base.GetChildRows(this.Table.ChildRelations["Labels_element"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreatedByRowChangeEvent : EventArgs {
            
            private CreatedByRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRowChangeEvent(CreatedByRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreatedByRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class elementRowChangeEvent : EventArgs {
            
            private elementRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRowChangeEvent(elementRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public elementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ParentGenreRowChangeEvent : EventArgs {
            
            private ParentGenreRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRowChangeEvent(ParentGenreRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentGenreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class UpdatedByRowChangeEvent : EventArgs {
            
            private UpdatedByRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRowChangeEvent(UpdatedByRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdatedByRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PrimaryArtistRowChangeEvent : EventArgs {
            
            private PrimaryArtistRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRowChangeEvent(PrimaryArtistRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrimaryArtistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RequestedByRowChangeEvent : EventArgs {
            
            private RequestedByRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRowChangeEvent(RequestedByRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RequestedByRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TrackRowChangeEvent : EventArgs {
            
            private TrackRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRowChangeEvent(TrackRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TrackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EncodedAudioFilesRowChangeEvent : EventArgs {
            
            private EncodedAudioFilesRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRowChangeEvent(EncodedAudioFilesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EncodedAudioFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GenresRowChangeEvent : EventArgs {
            
            private GenresRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRowChangeEvent(GenresRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GenresRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MusicalWorkRowChangeEvent : EventArgs {
            
            private MusicalWorkRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRowChangeEvent(MusicalWorkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MusicalWorkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PublishersRowChangeEvent : EventArgs {
            
            private PublishersRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRowChangeEvent(PublishersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublishersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PublisherRowChangeEvent : EventArgs {
            
            private PublisherRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRowChangeEvent(PublisherRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PublisherRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class WritersRowChangeEvent : EventArgs {
            
            private WritersRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRowChangeEvent(WritersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WritersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PhysicalDiscRowChangeEvent : EventArgs {
            
            private PhysicalDiscRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRowChangeEvent(PhysicalDiscRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PhysicalDiscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReleaseRowChangeEvent : EventArgs {
            
            private ReleaseRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRowChangeEvent(ReleaseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReleaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LabelsRowChangeEvent : EventArgs {
            
            private LabelsRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRowChangeEvent(LabelsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LabelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591